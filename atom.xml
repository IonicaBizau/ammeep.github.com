<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Amy Palamountain]]></title>
  <link href="http://amy.palamounta.in/atom.xml" rel="self"/>
  <link href="http://amy.palamounta.in/"/>
  <updated>2013-09-22T12:10:58+12:00</updated>
  <id>http://amy.palamounta.in/</id>
  <author>
    <name><![CDATA[Amy Palamountain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration Testing ASP.NET Web API]]></title>
    <link href="http://amy.palamounta.in/blog/2013/08/04/integration-testing-for-asp-dot-net-web-api/"/>
    <updated>2013-08-04T13:23:00+12:00</updated>
    <id>http://amy.palamounta.in/blog/2013/08/04/integration-testing-for-asp-dot-net-web-api</id>
    <content type="html"><![CDATA[<p>Want to know what kind of HTTP APIs suck? The ones that break all of their clients every time a new version is minted.
Everybody shipping an HTTP API, shoud have one question at the top of their mind.</p>

<blockquote><p>Is this change going to break my existing clients? How can I keep breaking changes to a minimum?</p></blockquote>

<p>One way to be sure that you arent going to build one of <em>those</em> APIs, is to set up a series of automated integration tests. In this post I will show you an approach I found helpful to integration testing HTTP APIs built on top of ASP.NET Web API.</p>

<h2>Host Anywhere, Test Anywhere</h2>

<p>The utopia of an API integration test suite, would be a suite which could be executed quickly, and in memory, on our dev machines. Without <em>any</em> HTTP traffic. This would allow us to more quickly become aware of breaking changes at the boundary of our API. Wouldnt it also be great if we could then take those <em>same</em> tests, and run them against our test deployment?</p>

<p>To do this, we need to design our API in a way that supports a host anywhere — test anywhere mentality. Our application must first be designed in a way that can be started in both the IIS hosted environmnt, and the self hosted environment.</p>

<p>Encapsulating the root of our API application is an important first step. When either the ASP.NET web host, or the self hosted API kicks off, it is able to call into our API application and call <em>Start()</em>. At this point all the configuration required for API can be carried out.</p>

<figure class='code'><figcaption><span>API Application Interface </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IApiApplication</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">void</span> <span class="nf">Start</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When our hosting environment starts, we are able to carry out all the configuration required for our API application to run. We can attach all of our custom message handlers, add any custom media type formatters, and configure our routes. What this achieves is a way for us to bootstrap our API, independent of the host infrastructure.</p>

<figure class='code'><figcaption><span>Api Application Implementation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyApiApplication</span> <span class="p">:</span> <span class="n">IApiApplication</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">HttpConfiguration</span> <span class="n">_configuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyApiApplication</span><span class="p">(</span><span class="n">HttpConfiguration</span> <span class="n">configuration</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// composition root activites</span>
</span><span class='line'>        <span class="c1">// set up DI container</span>
</span><span class='line'>        <span class="c1">// set seralisation settings on configuratin object</span>
</span><span class='line'>        <span class="c1">// set up routes</span>
</span><span class='line'>        <span class="n">_configuration</span><span class="p">.</span><span class="n">Routes</span><span class="p">.</span><span class="n">MapHttpRoute</span><span class="p">(</span>
</span><span class='line'>            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;API Default&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">routeTemplate</span><span class="p">:</span> <span class="s">&quot;api/{controller}/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">defaults</span><span class="p">:</span> <span class="k">new</span> <span class="p">{</span> <span class="n">id</span> <span class="p">=</span> <span class="n">RouteParameter</span><span class="p">.</span><span class="n">Optional</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can take our IApiApplication, and place it in a different host. Each host is able to call <em>Start()</em>, and magically our API is bootstrapped in the way we expect.</p>

<h2>Testing the API application</h2>

<p>This is great news for our integration test suite. We can now take our API, which we may have previously hosted inside IIS, and host it in memory — inside a test session.</p>

<p>Start out by creating abstractions in your API server</p>

<figure class='code'><figcaption><span>API Server Interface </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IApiServer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">HttpMessageHandler</span> <span class="n">ServerHandler</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Start</span><span class="p">();</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Stop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now create a version of the API server, which is responsible for starting the API applciation, and hosting it inside our unit tests.</p>

<figure class='code'><figcaption><span>An in memory API server to use in our tests </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">InMemoryApiServer</span> <span class="p">:</span> <span class="n">IApiServer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">HttpServer</span> <span class="n">_server</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Uri</span> <span class="n">BaseAddress</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">&quot;http://localhost&quot;</span><span class="p">);</span> <span class="p">}}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">ApiServerHost</span> <span class="n">Kind</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">ApiServerHost</span><span class="p">.</span><span class="n">InMemory</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">HttpMessageHandler</span> <span class="n">ServerHandler</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_server</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">httpConfig</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpConfiguration</span><span class="p">();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">apiConfig</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ApiServiceConfiguration</span><span class="p">(</span><span class="n">httpConfig</span><span class="p">);</span>
</span><span class='line'>            <span class="n">apiConfig</span><span class="p">.</span><span class="n">Configure</span><span class="p">();</span>
</span><span class='line'>            <span class="n">_server</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="p">(</span><span class="n">httpConfig</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Could not create server: {0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">Fail</span><span class="p">(</span><span class="s">&quot;Could not create server: {0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Stop</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_server</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Could not stop server: {0}&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From our test project now we can write test fixtures which start the in memory server during the test fixture setup phase, and tear it down when they are done.</p>

<p>The IApiServer exposes a ServerHandler. We are going to use this handler to take advantage of a neat trick
exposed by the HttpClinet, which will allow us to pass the <em>server</em> code directly to the client. In this way <em>ZERO</em> HTTP traffic will be generated.</p>

<figure class='code'><figcaption><span>API Server Interface </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IApiServer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">HttpMessageHandler</span> <span class="n">ServerHandler</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// other bits</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in our test</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="p">(</span><span class="n">_server</span><span class="p">.</span><span class="n">ServerHandler</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//do stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>NUnit Intergration Test of our API in memory </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[TestFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BookApiTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IApiServer</span> <span class="n">_server</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">BooksRelativeUri</span> <span class="p">=</span> <span class="s">&quot;api/books/1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nf">BookApiTests</span><span class="p">(</span><span class="n">IApiServer</span> <span class="n">apiServer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_server</span> <span class="p">=</span> <span class="n">apiServer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [SetUp]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_server</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [TearDown]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">TearDown</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_server</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [Test]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">GetOneBookReturnsSuccessfulStatusCode</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">valuesUri</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">_server</span><span class="p">.</span><span class="n">BaseAddress</span><span class="p">,</span> <span class="n">BooksRelativeUri</span><span class="p">);</span>
</span><span class='line'>        <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="p">(</span><span class="n">_server</span><span class="p">.</span><span class="n">ServerHandler</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">HttpResponseMessage</span> <span class="n">httpResponseMessage</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">GetAsync</span><span class="p">(</span><span class="n">valuesUri</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">httpResponseMessage</span><span class="p">.</span><span class="n">IsSuccessStatusCode</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">httpResponseMessage</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">OK</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://amy.palamounta.in/images/posts/intergration-testing-webapi/simple-test-results.png"></p>

<h2>It gets better!</h2>

<p>Is there a way we can take the integration test suite, and execute it against a real server running our api? Perhaps in a test environment. Absolutely. In fact, I would encourage you to do this, and luckily, our test suite supports this.</p>

<figure class='code'><figcaption><span>Level Up Testing </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[TestFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">InMemoryBooksApiTests</span> <span class="p">:</span> <span class="n">BooksApiTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">InMemoryBooksApiTests</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="k">new</span> <span class="n">InMemoryApiServer</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[TestFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AgainstServerBooksApiTests</span> <span class="p">:</span> <span class="n">BooksApiTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AgainstServerBooksApiTests</span><span class="p">():</span> <span class="k">base</span><span class="p">(</span><span class="k">new</span> <span class="n">AspNetApiServer</span><span class="p">(</span><span class="n">ApiHost</span><span class="p">.</span><span class="n">URI</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">BookApiTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IApiServer</span> <span class="n">_server</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">BooksRelativeUri</span> <span class="p">=</span> <span class="s">&quot;api/books/1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nf">BookApiTests</span><span class="p">(</span><span class="n">IApiServer</span> <span class="n">apiServer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_server</span> <span class="p">=</span> <span class="n">apiServer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [SetUp]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Setup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_server</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [TearDown]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">TearDown</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_server</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [Test]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">GetOneBookReturnsSuccessfulStatusCode</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">valuesUri</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">_server</span><span class="p">.</span><span class="n">BaseAddress</span><span class="p">,</span> <span class="n">BooksRelativeUri</span><span class="p">);</span>
</span><span class='line'>        <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="p">(</span><span class="n">_server</span><span class="p">.</span><span class="n">ServerHandler</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">HttpResponseMessage</span> <span class="n">httpResponseMessage</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="n">GetAsync</span><span class="p">(</span><span class="n">valuesUri</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">httpResponseMessage</span><span class="p">.</span><span class="n">IsSuccessStatusCode</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">httpResponseMessage</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">,</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">OK</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://amy.palamounta.in/images/posts/intergration-testing-webapi/testingapi.png"></p>

<p>Above, I have turned our unit test into abstract class, and created two test classes which inherit from it. One executes the tests against the InMemoryApiServer, and the other, against the Test Server. Allowing the same test suite to be quickly executed in memory, <em>and</em> against the test server when we are ready to.</p>

<p>You may not like using abstract classes in unit tests in this way. Great! Feel free to take these ideas and mould them into your own approach. The thing that I personally have found helpful in this approach has been, it has allowed me to build a comprehensive suite of tests, which I can run before I check in. Equally on the build server, I can make up the tests which execute against the test environment, with an nUnit category (or similar in your test framework of choice) and run those tests as part of a longer running build.</p>

<p>I hope you were able to find something in this approach that may help you do the same.</p>

<p><em>As an aside many parts of ASP.NET Web API are built in a way that supports </em>unit testing<em>. This blog post focuses on a different kind of testing — integration testing. I would encourage you to unit test your components in the first instance.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exist in the web - Not on it]]></title>
    <link href="http://amy.palamounta.in/blog/2013/07/29/exist-in-the-web-not-on-it/"/>
    <updated>2013-07-29T22:06:00+12:00</updated>
    <id>http://amy.palamounta.in/blog/2013/07/29/exist-in-the-web-not-on-it</id>
    <content type="html"><![CDATA[<p>I gave a talk at <a href="http://wdcnz.com/" title="WCDNZ">WDCNZ 2013</a> - Exist in the web, not on it. It&rsquo;s a 30,000 ft view on how we can model our public Web APIs close to how HTTP was designed to be used, and an illustration of what kinds of problems hypermedia web apis can try and solve for your in your public Web APIs.</p>

<p>If you came to the conference, then thanks so much. I hope you had a fantastic day. Otherwise, enjoy the video.</p>

<p><strong>Video</strong></p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/73051983 "></iframe></div>


<p><strong>Slides</strong></p>

<script async="true" class="speakerdeck-embed" data-id="2fe9e700d795013087d05e0fffb1f05d" src="http://amy.palamounta.in//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unsuck your backbone]]></title>
    <link href="http://amy.palamounta.in/2013/04/12/unsuck-your-backbone/"/>
    <updated>2013-04-12T00:00:00+12:00</updated>
    <id>http://amy.palamounta.in/2013/04/12/unsuck-your-backbone</id>
    <content type="html"><![CDATA[<h1></h1>

<p>I gave a talk at <a href="http://codemania.co.nz/" title="Codemania">Codemania</a> - Unsuck your backbone. It was a lot of fun, I hope you all enjoyed it as much as I did.</p>

<p><strong>Slides</strong></p>

<script async="true" class="speakerdeck-embed" data-id="cf29dcf084890130af0d12313d053a9e" src="http://amy.palamounta.in//speakerdeck.com/assets/embed.js"> </script>


<p><strong>Video</strong></p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/0o2whtCJw8I "></iframe></div>


<p>The purpose of the talk is to introduce some simple architectural patterns that you can use in your large JavaScript applications to help you achieve a scalable code base.</p>

<p>The general gist is:</p>

<ul>
<li>Backbone is awesome, but its scaling it is hard.</li>
<li>MVC is a presentation pattern, and if we are to scale our JS apps we need to look beyond it</li>
<li>People have been using composite application architecture successfully when building desktop applications for a long time now, so can we do the same with JavaScript apps?</li>
<li>We go through some of the concepts behind modules and application objects and patterns, pub/sub and how the interaction between them might work,</li>
<li>Then introduce marionette.js as a set of extensions to backbone which allow you to achieve a composite application architecture .
*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Master Kids]]></title>
    <link href="http://amy.palamounta.in/2013/02/22/games-masters-workshops-kids-can-code/"/>
    <updated>2013-02-22T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2013/02/22/games-masters-workshops-kids-can-code</id>
    <content type="html"><![CDATA[<h1></h1>

<p>If you came to the Digital Media Careers Day at Te Papa, and attended my workshop, you may be here looking for the game we built together.</p>

<p>You can find it here</p>

<p><a href="http://ammeep.github.com/CollieInSpace/" title="http://ammeep.github.com/CollieInSpace/">http://ammeep.github.com/CollieInSpace/</a></p>

<p>This is a link to the source code. From here you are able to play the game, download the code, and even try and add some more features to the game. Any questions, or just want to know more about what you can do to learn more about programming, just send me a message bellow!</p>

<script async="true" class="speakerdeck-embed" data-id="c92f46d05efb01307e0412313b031ac2" src="http://amy.palamounta.in//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing to power-plays]]></title>
    <link href="http://amy.palamounta.in/2012/12/22/how-do-we-deal-with-sexist-power-plays/"/>
    <updated>2012-12-22T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2012/12/22/how-do-we-deal-with-sexist-power-plays</id>
    <content type="html"><![CDATA[<h1></h1>

<p>To be honest with you, I have thought about writing a post to this effect on and off for a very long time. The thoughts that have prevented me from posting on this topic have roots in fear. Fear of the impression I will make on people, fear of people thinking that I’m just a talker not a doer. Fear of people taking me the wrong way.</p>

<p>And then Iris Classon <a href="http://www.irisclasson.com/2012/12/19/stupid-question-107-shhh-harassment-not-a-problem-strong-content-warning/">posted about 2 horrible men who disgraced</a><a href="http://www.irisclasson.com/2012/12/19/stupid-question-107-shhh-harassment-not-a-problem-strong-content-warning/"> themselves beyond belief</a>, making a wonderful person feel uncomfortable and revolting. She took a very bold step and made her experiences public. She wasn’t afraid to speak up and show everyone this kind of behaviour is not to be tolerated . In every way this is the appropriate course of action. If these men knew what they were doing – these men deserved to be disgraced. These men deserve their reputation to be spoilt. If they are disturbed individuals, then they need our help.</p>

<p>Disclaimer: If you are a man, I have one thing to say to you. You <strong>DO NOT</strong> deserve to feel disgraced or embarrassed to be a man in light of to what happened to Iris. You do not need to feel shame in any way. These are actions by individuals who truly are not of a safe mental capacity to be taking part in any community. You should not shoulder any feelings of shame. You are awesome.</p>

<p>What happened to Iris, is an example of ‘Power Play’ behaviours. At the core, power plays  have a net effect of making one person feel strong, powerful and dominant  at the expense of another feeling weak, powerless and even fearful. They are about bolstering one ego, while tearing down another.</p>

<p>Groping a woman at a conference says very plainly ‘ I am entitled to you, and you are not entitled to say no’. This is a power play. Humiliating a peer about their lack of knowledge in a particular subject is a power play, its says  ’ your contribution is meaningless because I know more than you’. Consistently talking about colleagues/friends breasts is a power play of the most obnoxious kind – it says ‘ I am more important and powerful than all the woman here’.</p>

<p>I think in general, power play behaviour can be divided into two broad categories – those that are conscious, and those that are not. These should be dealt with in different ways.</p>

<p>What Iris has had to endure is an example of a conscious power play. These ‘men’ feel threatened by Iris, a woman who is strong, clever and well liked. These ‘men’ felt so threatened by this that they felt the need to launch a personal attack. To ‘put her in her place’. To assert their dominance. To assert to themselves that they are important, and somehow relevant. What they did was designed to make Iris feel frightened and unsure about her position - luckily Iris is as strong as she is and told them where to go. Not all would be strong enough to do this. This kind of calculated power play is extremely dangerous. Outwardly hostile and threatening power plays <strong>need</strong> to be reported to the police.</p>

<p>There is a second kind of power play – the unconscious kind. These are usually subtle, off the cuff comments and actions. Putting someone down in front of your peers. Assuming that the only woman in the meeting should take notes. Relentlessly questioning a woman about why she wore a dress and make up ‘ who are you going out with?’. In all of these cases someone is unconsciously putting another ‘in their place’ in the pecking order.</p>

<p>Most of the time, off the cuff comments like this are easily rectified with a quick apology. Sometimes though a comment is made without the person being aware of the impact it had on another person. Most people out there mean well, so we should give people the benefit of the doubt in these cases.  By this is defiantly don’t mean ‘let it slide’ I just mean, don’t assume the person is a nut case (unless of course, they are)</p>

<p><strong>We shouldn’t let these unconscious power plays slide.</strong> Making people aware of the hurtful and uncomfortable things they said or did, is the only way forward. I’m not talking rage induced table flips. Just a quiet word or two which makes the person think about the reasons why the said that statement.</p>

<ul>
<li>I don’t get it? Whats so funny about ….</li>
<li>Can you please explain what you mean?</li>
<li>Of what concern is it to you if I wear a dress?</li>
<li>Do you realise you sound incredibly sexist? I’m sure your not, so just wondering if you ment that?</li>
</ul>


<p>It’s not the words, it’s the effect of the words, gently guide the person to realise that what they said was embarrassing to their character. Make them understand that you know that they are not a ‘douche bag’ but in that moment, they really sounded like one.</p>

<p>Now – easier said than done right? I know <strong>so many</strong> strong woman, all with stories to tell around sexist comments or actions. Almost none of these stories end with the woman standing up for her self. The ones that do? Not many of these end pretty. ‘Lighten Up’, “It was a joke sweetheart’ ‘ Your mental’ ‘But all I was saying is I like your tits’.</p>

<p>When challenging someone on a comment, generally most people will be so embarrassed, will be unwilling to admit their failing and instead of apologising  they will attempt to ensure that they remain on top – essentially a continuation of the original power play.</p>

<p>This is where we all need to pitch in. We need to <strong>ALL</strong> start recognising these behaviours, and help those in need, in their time of need. If you see someone shrinking unnecessarily as a result of someones words or actions. <strong>Step up!</strong> Gently make them understand that they currently look like a worse person than they actually are. It takes two seconds, and doesn’t have to cause any confrontation. If the person gets worked up over it? Who cares. Let them stew on it. Eventually your words will sink in.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/be-excelent.jpeg"></p>

<p>These days most of us agree that treating each other with respect, is the only way to live. Yet sometimes we stand by, and stay quiet when we see others not living by this code. Iris said in her post that so many woman keep quiet. It’s because they don’t realise the support they would have if they spoke up. If we start standing up for sexism in the moment, all of these issues will follow suit. Woman, transgender, or in fact any minority will start to feel supported and listened to, and people will generally learn to be even more excellent to each other!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat &#8211; Wellington]]></title>
    <link href="http://amy.palamounta.in/2012/12/09/global-day-of-code-retreat-wellington/"/>
    <updated>2012-12-09T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2012/12/09/global-day-of-code-retreat-wellington</id>
    <content type="html"><![CDATA[<h1></h1>

<p><img class="center" src="http://amy.palamounta.in/images/posts/gdcr/gdcr_ad.png"></p>

<p>Yesterday a group of dedicated developers in Wellington and Auckland woke early on a saturday morning to help kick of the Global Day of Code Retreat in style. We came from all walks of development life, from Haskell to C#, from JavaScript to Perl, we all came together with a common goal – to practice our craft. In 6 45 minute sessions we coded <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway’s Game of Life</a> each time with a new constraint, <strong>deleting</strong> all traces of the code afterwards.</p>

<p>The most interesting thing about the day was that initially there was reluctance to delete code. It was amazing to see that by the end of the day everyone was more than happy to delete their code, seeing the value on iterating on ideas to reach an awesome solution.</p>

<p>It was incredible to see the range of solutions people came up with to work around constraints. One pair used try – catch blocks to avoid ‘if’ statements, and another pair built an eventing system to avoid the need for return values. The diversity of solutions was great to see!</p>

<p>Some massive thank you’s are in order! First, to the brains behind the idea of a Code Retreat, <a href="http://coreyhaines.com/">Corey Haines</a> <a href="https://twitter.com/jthurne">Jim Hurne</a> <a href="https://twitter.com/volunteerjunkie">Alissa Conaty</a>  and <a href="https://twitter.com/adibolb">Adi Bolboaca</a> have put in a massive amount of work to ensuring that the Global Day of Code Retreat was a success by supporting all the facilitators around the world. Secondly to our <a href="http://globalday.coderetreat.org/sponsors.html">GlobalSponsors</a> particulaly <a href="http://www.jetbrains.com/">JetBrains</a>. Locally – the day would not have been possible if not for the support of <a href="http://www.xero.com/">Xero</a> ( who gave us our beautiful venue) and <a href="http://www.mindscapehq.com/">Mindscape</a> ( who kept us feed on the day) Both these companies do such an amazing job at supporting the local developer community and we appreciate it so much!</p>

<p>Thanks to every one who came and made the day what it was.  This is  what made the day so successful. <a href="https://twitter.com/martin308">Martin</a> and I had such a great time facilitating the event!.Can’t wait for the next one!</p>

<div class="flexslider">
      <img src="http://farm9.staticflickr.com/8559/8939946166_6efdf3f27f_z.jpg">
      <img src="http://farm9.staticflickr.com/8269/8939946112_f6ff07e5ec_z.jpg">
      <img src="http://farm3.staticflickr.com/2857/8939945654_4c8a63273e_z.jpg">
      <img src="http://farm8.staticflickr.com/7439/8939324127_4850c7c572_z.jpg">
      <img src="http://farm6.staticflickr.com/5451/8939945380_efe9d4f1b5_z.jpg">
      <img src="http://farm8.staticflickr.com/7387/8939323565_ed45d6b78a_z.jpg">
      <img src="http://farm9.staticflickr.com/8405/8939323455_cbaf281c71_z.jpg">
      <img src="http://farm4.staticflickr.com/3681/8939322579_f8ac2ccf46_z.jpg">
      <img src="http://farm6.staticflickr.com/5332/8939322261_2a077f82bb_z.jpg">
      <img src="">
      <img src="http://farm6.staticflickr.com/5460/8939943480_1e3a4ff68b_z.jpg">
    </ul>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ten Traumas In Ten Minutes]]></title>
    <link href="http://amy.palamounta.in/2012/10/26/ten-traumas-in-ten-minutes/"/>
    <updated>2012-10-26T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2012/10/26/ten-traumas-in-ten-minutes</id>
    <content type="html"><![CDATA[<h1></h1>

<p>Here are the slides from the ten minute lightening talk I gave at <a href="http://codemania.co.nz">Codemania After Dark</a> this Friday. My very first talk given to an audience of reasonable size – thank you all for coming out.</p>

<p>The idea behind this talk, was to take you through ten parts of developing for the cloud which can cause headaches or confusion. But as it turns out most of what I mentioned actually applies more at a very broad level – which is awesome because developing for the cloud is really not that different from developing any other application</p>

<script async="true" class="speakerdeck-embed" data-id="5084d183df78cd0002012545" src="http://amy.palamounta.in//speakerdeck.com/assets/embed.js"> </script>


<p>The 10 traumas were:</p>

<ol>
<li>Deployments are painful – Deployment automation in the cloud is easy</li>
<li>I’m married to my cloud –  How to avoid being tied to one cloud</li>
<li>The definition of insanity – Transient fault handling</li>
<li>Limitations of storage – How to work around them</li>
<li>We’ve got to we ‘web scale’ – What does that even mean? You can still use what you already know</li>
<li>Go Daddy goes down  - Simple DNS failover</li>
<li>Our app is slow – Why performance shouldn’t be slapped on at the end</li>
<li>You have lupus – Better diagnostics</li>
<li>The cloud chaos monkey – Be prepared for failures in the cloud</li>
<li>Your going to do it wrong – Accept that your designs might change</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Service Location]]></title>
    <link href="http://amy.palamounta.in/2012/10/26/on-service-location/"/>
    <updated>2012-10-26T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2012/10/26/on-service-location</id>
    <content type="html"><![CDATA[<p>I have some pretty strong feelings about the use of the Service Locator pattern in the software we build. They go along the lines of ‘why would you ever use it?’ and possibly (and somewhat mellow dramatically) rocking slowly backwards and forth in the corner of the shower after being exposed to it. So to ease my pain, and perhaps yours, I have compiled an explanation of why I feel so intolerant toward this pattern.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/servicelocator.jpg"></p>

<h2>Coupled To The Service Locator</h2>

<p>I’ll wager that you have heard about loose coupling in software. It’s something that developers from all walks of life can agree on – we should strive to build loosely coupled software. We do this for many reasons, to achieve composability, for ease of maintenance, testability and more generally, the sanity of the other developers on your team.</p>

<p>A technique used to achieve loosely coupled components is dependency injection. Dependency injection can come in many forms. From dependencies being provided at object construction time, all the way to being resolved, via a service locator, during the execution of a some operation on that object.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/graph.jpg"></p>

<p>By injecting dependencies when an object is constructed, you have the most chance of successfully building loosely coupled applications.</p>

<p>Somewhere in the middle, is property injection. Depending on how your property injection is implemented your chances of building loosely coupled components vary.</p>

<p>And at the very extreme – The Service Locator. When you implement a call to a static service locator during the execution of a methods, the net result is a hard coupling to the service locator.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/looslycoupledthing.jpg"></p>

<p>Am i loosely coupled? One could argue that our class is loosely coupled because is not reliant on a given implementation of the ILooselyCoupledDicisionEngine, and yes strictly speaking, this is true. But in regard to the how coupled this object is to other objects, this is a moot point.</p>

<p>The base level of coupling has already been set, we are already coupled to our static service locator. LooselyCoupledThing is <strong>directly</strong> coupled to the ServiceLocator object.</p>

<p>LooselyCoupledThing is unable to be an object in its own right, without relying on its dirty friend the service locator to help it along in life.</p>

<p>By using the ServiceLocator object you have introduced coupling where your goal was to reduce it.</p>

<h2>Unit Tests Scream Warning Signs</h2>

<p>One of the first things I notice when working with an application which has heavy use of a service locator, is the extra unit testing baggage which comes with it. Usually there is a marked lack of discoverability of dependencies, and over time unit tests projects seem to grow in complexity until they are more complex than what they are testing.</p>

<p>Unit tests are a measuring stick for complexity in the code they are testing. The amount of setup work involved with getting a test to pass can be a strong indication for things like poor encapsulation and separation of concerns. When your unit test requires a full set up of your service locator object, alarm bells should be sounding, perhaps your components are not following the principals of SOLID as closely as they could. Let me explain.</p>

<p>As an example, lets define a class to represent a car. I’ll admit, I don’t know lot about cars so this could get interesting.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car1.jpg"></p>

<p>It doesn’t do a lot and its super easy to write a unit test for.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car2.jpg"></p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car4.jpg"></p>

<p>All is well in the world, the test passes, and the car is able to drive around.</p>

<p>Until someone who is very knowledgeable about cars spots my nieve implementation, and decides that a car needs an engine to start. The engine is resolved using our (dirty) friend, the service locator.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car5.jpg"></p>

<p>And now, the test fails. Our static service locator is unable to resolve our IEngine implementation.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car6.jpg"></p>

<p>But wait, our car is able to driven when our application runs outside of the context of the test, so what is different here? In the context of the test, we have not registered any of our dependencies with our service locator. Lets set them up now to get our test to pass.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car7.jpg">
<img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car8.jpg"></p>

<p><strong>For every new dependency</strong> which is resolved in line via a service locator like this, we need to ensure that our test suit has a corresponding dependency set up in its registry.</p>

<p>Hopefully you can see the problem here.<strong> </strong>This is a very trivial example, in the real world you can have many hundreds of services wired up in your unit test project like this. I commonly see *monolithic* test base classes, which before the start of *every* test fixture (or worse, an individual test) will set up every possible dependency that could be requested from the service locator object.</p>

<p>This is massive overhead, for both the running time of your tests and for ease of understanding of what is actually being tested.</p>

<p>These kinds of unit test are telling you two things</p>

<ul>
<li> That you are tightly coupled to your service locator.</li>
<li> That you are violating the principal of single responsibility.</li>
</ul>


<p>The car object has a single responsibility – to drive. It should not be involved with the resolution of its engine. Imagine if every time you had to drive into work you first had to find the correct engine for your car, and assemble the car with said engine before you could start it. This makes no sense conceptually, yet this is exactly the kind of design our service locator has given us.</p>

<p>So following that logic – when we call our cars constructor, we should have everything we need up, set up and ready to go, so that our object is ready to carry out its behaviours.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car9.jpg"></p>

<p>Ok – its a little better. But not much. We are still coupled to our service locator object and our test still require our service locator object to be bootstrapped and ready to go.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car10.jpg"></p>

<p>Lets turn our ServiceLocator object into an injectable dependency. I can almost hear proponents of the service locator pattern nodding in agreement. But the question is, is this any better? Its definitely better than using a static service locator. We can easily discover when we construct a car object that it takes an IServiceLocator dependency.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car12.jpg"></p>

<p>But, this is starting to feel like we need to write a lot of ‘plumbing code’ in our unit test. The purpose of this test is to assert that we are able to drive our car, so why does it feel like all we are really showing is that we are able to set up a service locator?</p>

<p><strong>Over</strong> <strong>half</strong> the lines of code in this test class are about our service locator! Over half the lines of code in this test class are concerned with <strong>plumbing.</strong></p>

<p>Just mock the service locator!<strong>  O_O </strong></p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car13.jpg"></p>

<p>Our test class looks a little cleaner. But, is this enough? What happens when we decide that in order to drive, not only do we need an engine, but we also need some wheels?</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car14.jpg"></p>

<p>Remember our test?</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car15.jpg">
<img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car16.jpg"></p>

<p>Our service locator mock knows nothing about our flash new wheels, and the test fails. The point here is at compile time we could not <strong>discover</strong> the new dependency on wheels. Our test are indicating that injecting a service locator object is a brittle approach, because we can never be clear about the <strong>intent</strong> of the car object.</p>

<p>A much simpler approach, is to be explicit and inject our dependencies up front.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car17.jpg"></p>

<p>Now we know, if we want to construct a car, we will need an engine and a collection of wheels. And when someone decides we need a radio in order to drive our car, a compile error will warn us a new dependency has been added to our car.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/car18.jpg"></p>

<p>And look at our test! Much simpler, much more explicit, and it only tests one thing!</p>

<h2>Lifetime Management Hell</h2>

<p>A commonly overlooked side effect of introducing Inversion of Control to your software, are changes life time management of objects.  A lack of understanding of this side effect, combined with excessive or blind use of a service locator object, can have unexpected and even catastrophic side effects.</p>

<p>To understand what I mean by this lets look at a very simple example – a sloth repository.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/sloth.jpg"></p>

<p>In this example, when we want to query our datastore for all the sloths, we have direct control over when our unit of work gets disposed. Or in other words, we can manage the lifetime of the unit of work object.</p>

<p>If we choose to inject the unit of work via our inversion of control mechanism, we loose the ability to choose when the unit of work gets disposed. We can no longer wrap it up in a nice using statement. The unit of work needs to disposed of by the object which is responsible for constructing our repository.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/sloth2.jpg"></p>

<p>If you are using an IOC container then it will be its responsibility to coordinate the call to Dispose. But – how can the container possibly know when unit of work is ready to be disposed of?</p>

<p>Luckily, the cleaver guys and gals who have created your IOC containers understand that out of inversion of control naturally arises the need to manage object scope and lifetime. Modern IOC containers provide out of the box support for managing the lifetime of an object, in the scope of a thread, an http request or even in singleton scope. Modern inversion of control containers are smart enough to cover almost any lifetime scope we can dream up.</p>

<p>Nicholas Blumhardt covers this in more detail in <a href="http://nblumhardt.com/2011/01/an-autofac-lifetime-primer/">this excellent blog post</a> if these concepts are new to you, I strongly recommend reading his description.</p>

<p>So what about the service locator’s pattern? When calling into your service locator’s in line in your class, what lifetime scope should be used to request the object? The parent object has already been constructed and the information the container needs to give you a correctly scoped dependency is gone. The service locator is highly likely to give you an object which does not match the scope of its parent.</p>

<p>How can getting the incorrectly scoped object have catastrophic effects?</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/sloth3.jpg"></p>

<p>In a web app, a unit of work is something that makes sense to be scoped per HTTP request. If our service locator resolves an incorrectly scoped unit of work (i.e. one outside the current HTTP request) all kinds of funny things can start happening. In the above example one HTTP request thread is inserting a sloth. When save is called, we find that a different HTTP request thread has already disposed of our unit of work.</p>

<p>The example is one that you would probably catch pretty early on, as it throws an exception, but you can imagine that not all cases will not throw exceptions but silently work without any obvious indication of incorrect functionality.</p>

<p>Imagine a simple attribute (created in singleton scope) which is used to validate user permissions.</p>

<p> <img class="center" src="http://amy.palamounta.in/images/posts/onservicelocation/perm.jpg"></p>

<p>It uses a service locator to resolve the current user object. It then uses this object to validate that the current user had permission to do something. Everything works great. Until you check the debug logging under load. The current thread user, and the object the attribute was using to validate permissions were actually different! The service locator knows nothing about what scope it should resolve the current user from. Some users get denied when they had permission, and some users are let through when in reality they shouldn’t have. Eeek!</p>

<p>It is super important that when using techniques such as inversion of control that we understand the implications to life time management. If we don’t understand this concept, and we blindly use the service locator pattern, there will be trouble in your future.</p>

<h1>When is it ok?</h1>

<p>Never.</p>

<p>Ok, thats a bit of stretch. Sometimes you cant avoid it.</p>

<p>There are generally two broad cases where you might need to break out and call the service locator.</p>

<ul>
<li> When your class interactions have been designed in a way which are not easily injectable. In this case the advice is <strong>refactor</strong> your code to support it.</li>
<li> When you are using a framework component which does not support constructor injection – which I often find cases for in ASP.NET</li>
</ul>


<p>There is a third, more specialised case, where I can see an argument to use a service locator object. When building libraries which have swappable components. This case would be a good use (the only one I can think of) of the common service locator project <a href="http://commonservicelocator.codeplex.com">http://commonservicelocator.codeplex.com</a> What this would enable developers consuming your library or framework is to plug in their dependencies without needing to know the implementation details of your own IOC container. <strong>However</strong>, this should be the extent of its use. The library or frameworks internal code should still follow the principals of SOLID. There is still no need to have service locator calls sprinkled through out its code base.</p>

<p>During the description of testing a Car class I eluded to the fact that when using service location inline the car is responsible both for its own behaviour and its construction. This is the fundamental difference between dependency injection, and service location. In dependency injection, all objects are created externally, dependent objects are<strong> given </strong>to objects which need them. In service location, dependencies are <strong>requested. </strong>As much as I hate to admit, I can see that in some application architectures, the<strong> requesting</strong> of dependencies might be more appropriate. Though I can not see how this would ever need to be the sole way of injecting dependencies, throughout an application.</p>

<h1>Final thoughts</h1>

<p>The heavy use of service location in your code is generally a sign of few things. A tight coupling between objects, and objects resolution, objects which have more than one single responsibility, and a mine field of lifetime management hell.</p>

<p>If you find yourself in a position where your test projects require a similar level of maintenance and are of comparable complexity to you application code, have a good look into if you have baked in service locator object as a core concept in your application.</p>

<p>When we write software, we should be concerned the the business functions we are trying to solve – our core concepts are our business objects, not a service locator.</p>

<p>[![Kick It][27]][27]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Recipe To Make Girls]]></title>
    <link href="http://amy.palamounta.in/2012/10/22/2012528a-recipe-to-make-boys-and-girls-html/"/>
    <updated>2012-10-22T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2012/10/22/2012528a-recipe-to-make-boys-and-girls-html</id>
    <content type="html"><![CDATA[<p>If I were to ask you, genetically speaking what is the difference between a boy and a girl? You are likely to say  “A girl carries two X chromosomes, while a boy carries one X and one Y”.</p>

<p>If I where then to ask you how that determines ones sex, you might postulate that the Y chromosome contains some special genes which magically builds a male. While perhaps to build a female you need double the amount of X genes to make a female.</p>

<p>While this seems a reasonable assumption, it only proves to be partially correct. At least in humans it seems that the presence or absence of the Y is particularly important in kicking of development of a boy or a girl. However the number of X chromosomes is not of any particular relevance.</p>

<p>How is this possible? Surly girls have twice as much expression of X linked genes than boys? The answer is the X has its dosage compensated for.  Lets explore what this means.</p>

<h2>Girls only use one of their X Chromosomes</h2>

<p>As we know a boy has 1  X and 1  Y chromosome, while a girl possesses 2 X chromosomes. The double dose of X chromosomes in girls is only relivant very early in the development of a female embryo.</p>

<p>If it wasn’t for the mechanism known as Dosage Compensation any gene coded on an X chromosome would be expressed at double the required level, which can be lethal. Dosage compensation is a genetic regulatory mechanism which operates to neutralize unequal expression of genes on the X chromosome. What this achieves is a roughly equal level of expression of X linked genes in both boys and girls, preventing potentially lethal double dosing of X linked genes.</p>

<p>Compared to the desolate Y chromosome, the X chromosome is a sprawling metropolis of genetic information.There are are over 1000 genes on the X chromosome which play critical roles in development. Genes related to intelligence, blood clotting and muscle development are all found here. So you can see that if girls had double the amount of X genes compared to boys, some potentially lethal situations could easily arise.</p>

<p>In humans, females achieve dosage compensation by down regulating the expression of genes on one X chromosome. Essentially this means turning off the expression of the extra X chromosome. Thus bringing expression levels of genes on the X chromosome down to similar levels found in males. </p>

<p>The process of turning off an X chromosome is known as X Inactivation and it results in a large genetically inactive X chromosome, known as a Barr body. Actually not all portions of the second X chromosome become inactive, a very small percentage of genes remain active, though for the purposes of this post I will not be discussing this.</p>

<p>When chromosomes become inactive they appear as dark dense patches in the nucleus of a cell. You can see the Barr Body here – an inactive X chromosome.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/a-recipe-to-make-girls/barrbody.gif"></p>

<p>I will refrain from the deep dive into the mechanics of why inactive chromosomes appear as dense dark patches, but it is enough to say that rather than being an open and free stretch of DNA the inactive chromosome condenses down to the point where the gene expression proteins are unable to bind to the DNA to read it, there is physically not enough room for the ‘machinery’ to enter. </p>

<p>If you are interested, here is an awesome animation with narration explaining at a high level how the X chromosome gets inactivated by preventing the gene expression machinery from reading its DNA.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/mHak9EZjySs "></iframe></div>


<p>How does the extra X chromosome get ‘turned off’? There are set of genes which are found on the X chromosome. This area is known as Xic or the ‘X Inactivation Center’. Inside Xic there is a counting duo, two genes Xist and Tsix who have the jobs of kicking off the inactivation of one randomly selected X chromosome.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/a-recipe-to-make-girls/diagram.jpg"></p>

<p>Both Xist and Tsix produce non coding RNA transcripts. The Tsix RNA transcript is anti sense to the Xist and therefore can bind to the Xist sequence and thus inhibit its action. Before an X chromosome is inactivated both chromosomes will express Xist in low concentrations. Shortly after this one X chromosome will begin to express Tsix in high levels. Because Txis is an inhibitor of Xist expression what follows is a dramatic reduction the concentration of Xist in the area around this X chromosome. This chromosome will become the active X chromosome.</p>

<p>Meanwhile on the second X chromosome the expression of Xist is increased dramatically. The Xist transcript,then binds all the way along the X Chromosome it is expressed from, acting to recruit proteins involved in deactivating genes. The net result here is a Barr Body – an inactive X chromosome.</p>

<p>So we can see that even though girls carry twice the number of X Chromosomes than boys, the second X is only really required early on in sex differentiation, and is not required for normal cell activities. The X Chromosome encodes a lot of genes critical in both ongoing cellular activities and in early development, but double the expression of X linked genes is not required and in fact would be lethal during day to day cellular activity.</p>

<p>The expression of the sex genes is a fascinating topic.  So i hope this gave some insight into the goings on of the X chromosome – and a little bit about how girls are made. I’ll try get out a follow up too ‘A Recipe To Make Boys’</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflecting on Codemania]]></title>
    <link href="http://amy.palamounta.in/2012/04/02/reflecting-on-codemania/"/>
    <updated>2012-04-02T00:00:00+12:00</updated>
    <id>http://amy.palamounta.in/2012/04/02/reflecting-on-codemania</id>
    <content type="html"><![CDATA[<h1></h1>

<p>3 days post <a href="http://codemania.co.nz/">Codemania</a> – it was a blast. Down here in New Zealand we don’t often get the opportunity to listen to world class content, at a world class conference. We have <a href="https://twitter.com/#!/kiwipom">Ian Randall</a> and <a href="https://twitter.com/#!/nzben">Ben Gracewood</a> to thank for this. From the venue to the top notch speakers like <a href="https://twitter.com/#!/DamianEdwards">Damian Edwards</a>, <a href="https://twitter.com/#!/rioter">Jared Wyles</a>, <a href="https://twitter.com/#!/jarichaust">Jacinta Richardson</a>, <a href="https://twitter.com/#!/avon">Karl van Randow</a>, <a href="https://twitter.com/#!/reasther">Richard Easther</a> and <a href="https://twitter.com/#!/AaronMorton">Aaron Morton</a> . From start to finish and everything in between, <a href="https://twitter.com/#!/nzben">Ben</a> an <a href="https://twitter.com/#!/kiwipom">Ian</a> did a fantastic job!</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/reflecting-on-codemania/swag.jpg"></p>

<p>Phil Haack have the keynote ‘I fucking love to code’ where he talked about why we should do everything we can to keep our love for code alive. Anything that kills your passion, kills your mental flow, or the ability to code in anyway should be improved or removed. For example buy a decent chair. We spend more time sitting than we do sleeping as coders, so you better make damn sure your body is comfortable doing it. </p>

<p>Of particular relevance for me was the few moments he spent addressing the recently resurged topic of ‘subtle sexism in the work place’. For women, all to often this can a major blocker of our love to code, and as coders we should all be doing our best to remove this from the work place. I have a few thoughts on this I would like to share .I’ll keep it brief and save the rant for another post.</p>

<p>Subtle sexism is a problem in any workplace, and no industry can afford to become complacent. In particular, in programming circles due to a skewed ratio of men to women, work places can easily become ‘boys clubs’. Women programmers in a lot of cases have spent their lives playing with ‘boys toys’ enjoying things that ‘boys do’, only to join the work force to once again be reminded that this is a ‘boys profession’ or a ‘boys club’. This is the very antithesis of what we should be practising. Being welcoming and inclusive should be something we practice not only in the work place, but in every aspect of our lives. If you want to do your bit for removing subtle sexism in ANY work place there are some really simple things you can do. If you can, start young – teach your kids (and your kids playmates if you can) that girls can like blue and boys can like pink. Nursing, teaching, firefighting and engineering, these are professions which both boys and girls should feel comfortable in persuing without having to deal with ingrained gender divisions. If you can’t start young then call out your peers for behavior that makes you or others uncomfortable. 9 times out of 10 people are simply not aware that their sexist comment, tone of voice or rude behaviour makes them look like a worse person than they actually are.</p>

<p><a href="https://twitter.com/#!/nzkoz">Michael Koziarski</a>, a member of the core rails team took us on a trip through Community Development – giving plenty of humorous insights into how not to report an issue to projects. To me this spoke to the theme of ‘respect other programmers’. Joining in an endless rant on the GitHub issue list without concrete examples of your problem, is not helping anyone fix the issue any faster, in fact it makes it more likely that the issue wont get fixed. Who wants to help out an angry thankless mob with a sense of self entitlement? He also had another classic piece of advice: The shed is green – get over it.</p>

<p>Of personal highlight for me was <a href="https://twitter.com/#!/samsaffron">Sam Saffron</a> session ‘Performance on the web’ . He covered a lot of ground very quickly and never lost the audience once. This guy is a speed machine. Check out his blog of all his links from the talk <a href="http://samsaffron.com/archive/2012/03/23/sam-s-ultimate-web-performance-tools-and-resources">check them out</a>. There is so much amazingness in there.</p>

<p><a href="https://twitter.com/#!/ppog_penguin">Ivan Towlson</a> took us on a journey though the for loop and more specifically <em>How to Not Write a For Loop</em>. He really hit home his point that describing your loop in a more functional way can dramatically increase readability and in some cases safety of your loops. Luckily in .NET we are lucky to have things like LINQ and Lamdba expression trees, which allow us to code our loops in a much more functional way. Ivan left me inspired to re-visit functional languages.</p>

<p>The day closed with a non technical talk given by <a href="https://twitter.com/#!/maupuia">Mike Brown</a>. I found him to be incredibly engaging, he would fit right in on stage at TED. He spoke about how if we had to live our life over and over again, every pain, every sigh, every happiness, over and over again for eternity how would you feel? He asked us to reflect on how well we had lived, and how well we want to live. He called us to consider the power we have as programmers, power to change the way people work and live, and how important it is to treat this with respect. All very stirring stuff, and a perfect way to round off the day.</p>

<p>I personally walked away from the day completely inspired to live my life well, always do what I love. To keep respecting and embracing my peers and the ideas they have to contribute. Write lots of code, keep learning new things and most importantly have a blast doing it.</p>

<p>If you didn’t go to Codemania this year, I highly recommend you do next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Amy Grenade]]></title>
    <link href="http://amy.palamounta.in/2011/11/22/the-amy-grenade/"/>
    <updated>2011-11-22T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2011/11/22/the-amy-grenade</id>
    <content type="html"><![CDATA[<p>Its been almost 4 weeks since I had my cast off and my pins removed, and life has immeasurably improved.</p>

<p>It wasn’t without hiccup though. The day the ‘Amy grenade’ was pulled, the first thing the surgeon said was “your fingers are swollen” I explained that they did that from time to time, if i used them too much. He removed my cast and set free my skinny corpse arm. Even with swelling it was obviously wasted. It felt so vulnerable, like it would snap at any minute. It had had a 13 months of utter under use due to pain, and 2 months complete immobilisation. Needless to say my muscles had receded to a surface area not dissimilar to to that of a deflated balloon.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/the-amy-grenade/wrist.jpg"></p>

<p>Then he found a pair of regular pliers and pulled at the pins. The best I can describe the feeling was like a pressure build up that moved through my wrist as each pin was pulled. Like a fishing net that picks up more debris as its being dragged through water. It didn’t hurt during though there was a deep ache after, but it was no worse than anything I had experienced to date. It did give me the shakes though, just shock I guess. I have a 17 second video that captures the moment, that’s how quick it was! I have never felt anything like it in my entire life, and hope never to again.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/LDJu8g05gZM "></iframe></div>


<p>Unfortunately the surgeon was not happy with the level of swelling, the colour, or the temperature – dead cold. He explained that sometimes after extensive and prolonged injury the nervous system can ‘wind it self up’. The pain sensation pathway involves a collection of chemicals being released from one cell to the next, transmitting the signals required to correctly respond to pain and trauma. Normally this pathway completes on its own accord, but under some conditions an infinite loop is achieved. Long after injury has healed ,the pain pathway is still responding as though there is still trauma. Resulting in swelling, inflammation, temperature changes, heightened skin sensitivity and of course – pain. The surgeon reefer me on to a pain specialist,who also so had to be my anaesthetist. I saw him a few weeks after and he diagnosed it as Complex Region Pain Syndrome Type 1. He was happy that it was only minor and seemed to be receding on its own, apparently my constant massaging was helping restore normal responses. He gave me some cream which apparently releases chemicals which help break the feedback loop and sent me on my way.</p>

<p>The first few days were, to be frank, terrifying. But over the last 4 weeks the improvements are already huge. I have 45 degrees of upward flexion and 30 degrees downward. I can flex upward with a 1kg weight with no pain at all. My fingers and thumb move freely and without pain. My grip feels stronger than I remembered – though its still measures just less than my non dominate hand. Rome wasn’t built in a day, and I have many more months of rehabilitation. In the short term, my goals are:</p>

<ul>
<li>Push myself up from my chair.</li>
<li>Hold a 2kg weight in my hand with my elbow on a table, arm vertical. Without shaking like a leaf.</li>
<li>Improve my grip strength beyond that of my left.</li>
</ul>


<p>Even without anymore rehabilitation, the results as they stand today have changed my life. I can open doors, I can dress, I can write and BEST of all I can type. All without pain. Initially I would fatigue due to the weakness in my fingers, hand wrist and arm. Yesterday worked for 7 hours without once getting sore! I coded for almost 7 hours, without getting sore! Not once! Not a niggle or a pull. My head tapped out before my hand did. I am for the first time in a long time, starting to once again feel effective in my job and hobbies. I can get into that zone of deep concentration again – something I have not had the privilege of doing for over a year.
 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrist Reconstruction]]></title>
    <link href="http://amy.palamounta.in/2011/09/07/wrist-reconstruction/"/>
    <updated>2011-09-07T00:00:00+12:00</updated>
    <id>http://amy.palamounta.in/2011/09/07/wrist-reconstruction</id>
    <content type="html"><![CDATA[<p>Two weeks ago I went into hospital to finally get the reconstruction of my right wrist I have been waiting for. No nerves this time – I knew what to expect, was well researched and it was going to get rid of my pain. I closed my eyes in theater and opened them a second later in recovery. What I didn’t expect was the pain. I guess being cut, sawed, screwed and pined will do that to you. The surgeon had warned me how painful it was but I really was not prepared. It took a fair whack of Morphine to bring it down to a bearable level and Tramadol (synthetic opiate) to bring it down to a dull ache.</p>

<p><img class="left" src="http://amy.palamounta.in/images/posts/wrist-reconstruction/bandage.jpeg"></p>

<p>They had cast me in a back slab. A kind of half cast and bandage. When the swelling started coming down after about a week it became loose and would often push on my pins (which stick out the skin). This really hurts. The first night was impossible to sleep, pain was intense and anesthetic sickness kept my head in a bowl for the evening. Unfortunately I have had to keep taking Tramadol much to my distaste. I wouldn’t cope well without it. I said in my last post I wanted to be off the Tramadol by week 2, due to how either sick or euphoric i feel. Doing good though, some days I only take one (down from 6 a day)</p>

<p>Its now two weeks on and I have had my first dressing change. It looked a lot better than I was expecting. The cut is so clean and straight – even if the photo doesn’t do it justice. Its about 4 inches right down the middle of the wrist.</p>

<p><img class="right" src="http://amy.palamounta.in/images/posts/wrist-reconstruction/wound.jpg"></p>

<p>Once opened the surgeon was able to use what was left of my Scapholunate ligament to tighten the gap between my Scaphoid and Lunate bones. He corrected the orientation of the Scaphoid then screwed a bone anchor into my Lunate bone, and passed the remainder of the ligament through the anchor. This is lucky because if there had not been enough ligament left then the surgeon would have made a similar length incision on the underside of my wrist to harvest a ligament from my forearm. Once fastened he inserted two wire pins into the side of my wrist to hold everything in place while it heals. No I am not going to see if they are conductive and can light up a bulb !</p>

<p>In 6 weeks I will return to the surgeon for a quick pin removal – which yes – I intend to film. Then its off to the hand therapist for what sounds like an intense program. At this point I may be able to return to work half time 4 weeks ahead of his original 3 month medical certificate!!!</p>

<p>All of this is just so positive, I am well on my way through my 12 month recovery. Typing with two hands, picking up light things, gripping and dressing myself. Eventually Judo and weights, and finally back to the mountain</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A visit to the surgeon.]]></title>
    <link href="http://amy.palamounta.in/2011/06/02/a-visit-to-the-surgeon/"/>
    <updated>2011-06-02T00:00:00+12:00</updated>
    <id>http://amy.palamounta.in/2011/06/02/a-visit-to-the-surgeon</id>
    <content type="html"><![CDATA[<p>I have seen the surgeon for my follow up appointment. The bandage is off and the stitches are out. I have two small cuts from where the probe went in. Pain at this point is back to where it was previously, and any additional pain must just be scarring tissue. So doing quite well.</p>

<p>We discussed exactly what he saw during the Arthroscopy and what is required to be done.</p>

<p><strong>It boils down to two choices</strong></p>

<ol>
<li>Do nothing. Cope with the pain as it is now. In 5 – 10 years it will have developed into chronic arthritis. The range of motion in my wrist will be almost nothing. I risk requiring a full wrist fusion to relieve pain.</li>
<li>Surgical intervention. This involves a large incision over the top of my wrist. A small hole is drilled into each of the Scaphoid and Lunate bones. Metal bone anchors are placed into each hole and a tendon harvested from the other side of my wrist (another large incision) is threaded through each anchor. Wires and placed to help the tendon graft in place correctly. Basically a knee reconstruction in a finer scale, with massive wounds.</li>
</ol>


<p><strong>Q and A with the surgeon. </strong></p>

<ul>
<li>Grade of tear and degree of instability – Grade III ( of IV) with no gross instability. Good news!</li>
<li>Expected progression with no surgery – see above.</li>
<li>Recovery time if surgery/ progression – 3 Months in a cast. Wires are removed as an outpatient procedure. 6 months physical therapy before resuming normal activities with weight more than 5kg and sports.</li>
<li>Surgeons experience – Specialist hand surgeon. Last procedure of this kind was 2 weeks ago.</li>
<li>Any lost movement – Some extension and flexion will be lost. I may never do a press up again.</li>
<li>Any further surgery – No surgery comes with a money back guarantee, basically no comment.</li>
<li>Arthritis – Possible.</li>
<li>Surgeons question for me was – is changing jobs an option? I fired back with would he want to give up his job (he is very passionate very talented surgeon). Being a programmer is my lively hood. I will NOT give it up this early in the game.</li>
</ul>


<p>To me this is a no brainer, I am having the surgery. I have read around quite a lot and feel very informed about this procedure (Google books for Orthopedic Surgery text books for the win). I have also read about peoples experiences with this injury. Pain after the surgery sounds quite bad, the surgeon warned me of this and told me that his last patient was still eating Tramadol two weeks on. But he’s a silly boy and I am way tougher than any silly boy ! I really hope I can be tougher – Tramadol is no fun, I am either asleep all day or completely out of my head.</p>

<p>As for long term recovery – I have read many journal articles which give numbers which indicate perhaps 80% of people have good to excellent results and are completely pain free. Great news for me because I WILL be in that 80%. Determination and common sense should be all I need to ensure this.</p>

<p>These are the <strong>activities</strong> I would like to be able to do <strong>pain free within a year</strong></p>

<ul>
<li>Use a keyboard and a mouse for long periods without pain (i.e get my life back)</li>
<li>Pressing or gripping down while moving – activities like doing the dishes/ pulling pants up.</li>
<li>Writing</li>
<li>Be back at Judo – readjust my technique to be left handed.</li>
</ul>


<p>Stay tuned – Once I have heard from ACC (~3 weeks) I should shortly after get a date for surgery. I hope to be on the table as soon as possible. Hopefully within 2 months. The sooner I can get this done – the sooner I am on my path to getting back to normal.</p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Right wrist &#8211; Scapolunate troubles.]]></title>
    <link href="http://amy.palamounta.in/2011/05/26/right-wrist-scapolunate-troubles/"/>
    <updated>2011-05-26T00:00:00+12:00</updated>
    <id>http://amy.palamounta.in/2011/05/26/right-wrist-scapolunate-troubles</id>
    <content type="html"><![CDATA[<p>Its been ten months since I broke my Scaphoid, but I am only at the starting line on the race to recovery.
A group of us decided to hit the mountain for a weekend in July 2010. It was my first time snow boarding, and I was having a great time. Really starting to get the nack of it. I was boarding down at reasonable speed, turned a corner straight onto a wide steep area of ice. Picking up speed too quickly I panicd and dug my heals in. I smashed the end of my Scaphoid on the way down (see the pretty bright spot on the right? that’s apparently the break)</p>

<p><img class="left" src="http://amy.palamounta.in/images/posts/scapholunate-trouble/mri-break.png"></p>

<p>Prof. Allan Thurston. He explained to me that there are three ligaments which serve the purpose of unifying the movement of the Scaphoid and the Lunate bones during normal wrist movement. He predicted that the that the top and the middle ligament were probably damaged. We proceeded with arranging a diagnostic Arthroscopy of my wrist.</p>

<p>I was out for 15 minutes under General. It was quite an interesting experience, I was fairly nervous and jittery The nurses were lovely and gave me warmed blankets. It calms you quite a bit really. I went in to the operating room. Moved onto the table, and then everyone got to work around me. I remember the nurse saying “you will feel it coming over you now, like a drink” and it did. It got dark from the left hand side and I tasted something funny “I have a funny taste in my mouth” and then I was gone.</p>

<p>Just like that. Woke up like nothing happened in recovery room. I felt great to. I was so happy and foggy, I couldn’t stop saying “Thank you”. I think it was enjoyable only because I was out for 15 minutes – not enough time to start feeling bad.</p>

<p>Prof came to see me and said he went right in over the joint. He expected there to be obstruction but there was not. His guess was correct at least two of my ligaments were completely severed. He wouldn’t discuss as I was still high as a kite on the anesthetic, but said we would need to do something about it. If we don’t it will follow a very predictable and chronic degeneration pattern, causing my right hand to be essentially a dead weight at the end of my arm. No more programming, no more picking things up, no more right hand.</p>

<p><img class="left" src="http://amy.palamounta.in/images/posts/scapholunate-trouble/gap.jpg"></p>

<p>Next week I see him to discuss the options. I have done a lot of research and know that K wires and a reconstruction are pretty likely. It sounds similar to a knee reconstruction. I will keep blogging about my recovery, it will be a good motivator for me to keep track of my progress in the coming months. If there is one thing I would like you to take home, your hands and your wrists are a huge asset to you, coder or not. So look after them.
 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Contracts &#8211; Part 3 : Runtime Checker &#038; Basic Contracts]]></title>
    <link href="http://amy.palamounta.in/2011/01/07/201117code-contracts-part-3-runtime-checker-basic-contracts-html/"/>
    <updated>2011-01-07T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2011/01/07/201117code-contracts-part-3-runtime-checker-basic-contracts-html</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://amy.palamounta.in/images/posts/code-contracts/runtime.png"></p>

<p><strong>Post Conditions – Contract.OldValue</strong></p>

<p>In the remove method we call the helper Contract.OldValue with the number of animals at the party. What this is doing under the hood, is referring to the value of PartyAnimals.Count in its state before the execution for the method. </p>

<p><strong>Assume &amp; Assert</strong></p>

<p>The Contract.Assert(bool condition) method works as you would expect. It tests some condition, and if finds it to be false then an exception is thrown. Contract.Assume(bool condition) works in the same way, with one additional function – it allows the static checker to add this assumption to the collection of facts it has about your application. </p>

<p>The animals have tuckered themselves out at this rocking party, and it is time they went home. Thanks for reading, and we will catch you at the next party !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Contracts &#8211; Part 2 : The static checker]]></title>
    <link href="http://amy.palamounta.in/2011/01/04/code-contracts-part-2-the-static-checker/"/>
    <updated>2011-01-04T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2011/01/04/code-contracts-part-2-the-static-checker</id>
    <content type="html"><![CDATA[<p>This post will cover the options available when enabling static checking of your project, and a very basic overview of how static checking is achieved.</p>

<p>Code contracts give us the ability to contractually define invariant conditions which must be met during the lifetime of messaging between two pieces of code.  What this means is when Object A calls a method on Object B, A agrees to ad hear to any contract requirements defined by B.</p>

<p>To get compiler assistance for breaches of defined contracts, static checking must be enabled. First ensure that you have installed the code contract tools as per <a href="../../log/2011/1/3/code-contracts-part-1.html">Part 1</a> of this series. To enable open the properties of your current project, switch to the “Code Contracts” tab and check “Perform Static Contract Checking”. In this section you will see an additional 8 options, each enabling checking of defined contracts.</p>

<p><strong>Implicit Non-Null Obligations</strong><br/>
This will tell the static checker to look at all the points where messages are being sent between objects and the callers. Warnings will be generated each time the checker is unable to prove mathematically that the caller is NOT passing null values to listeners. By switching on implicit Non-Null Obligations checking, when ever calling code is found as obligated to pass null a recommendation about adding some guard code (in the form of contracts of course) will be made.</p>

<p>To see this in action, let us examine a group of animals getting ready to party</p>

<p> </p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>        <span class="k">public</span> <span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>     
</span><span class='line'>            <span class="k">public</span> <span class="n">Animal</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>                <span class="n">Age</span> <span class="p">=</span> <span class="n">age</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and they all want to attend a party</p>

<figure class='code'><figcaption><span>testing </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>        <span class="k">public</span> <span class="k">class</span> <span class="nc">AnimalParty</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICollection</span> <span class="n">_partyAnimals</span><span class="p">;</span>     
</span><span class='line'>
</span><span class='line'>            <span class="k">public</span> <span class="k">void</span> <span class="n">AddToAnimalParty</span><span class="p">(</span><span class="n">Animal</span> <span class="n">animal</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_partyAnimals</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">animal</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>    
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code looks reasonable and compiles, but there is one major flaw in the PartyAnimals class. If you haven’t been able to spot it, never fear, Code Contracts are here.  By switching on Implicit Non-Null Obligations in the static checking section of the Code Contracts project property, we find out that we are calling a method on a null object because we never assign _partyAnimals.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/code-contracts/ImplicitNotNull.png"></p>

<p>Assigning _partyAnimals satisfies the inherent obligation (created by calling instance methods on an ICollection) that it must first have an assigned instance.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>     <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICollection</span> <span class="n">_partyAnimals</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">public</span> <span class="n">AnimalParty</span><span class="p">()</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>             <span class="n">_partyAnimals</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The static checker still throws a warning when calling Add() on the party animals collection. We know that this is an instance method, and we have just added initialiser of _partyAnimals in our constructor. This is a point to note, with no contracts defined that _partyAnimals can never be null, the static checker is unable to infer that _partyAnimals might never possibly be null. Lets ignore this warning for now and come back to it later.</p>

<p><strong>Implicit Array Bounds Obligations &amp; Implicit Arithmetic Obligations</strong><br/>
Checking this option tells the static checker to infer from how an array is used or what arithmetic is performed, what preconditions should be added to your contract to ensure its correctness. This works by deriving proof of inherent assumptions about your variables. When these proofs are violated a warning is generated. This is all achieved by technique called Abstract Interpretation.</p>

<p><strong>On Abstract Interpretation</strong><br/>
This is the technique used by the static checker to derive and prove assumptions inherent to your code. Essentially the static checker executes against your program an ‘abstract domain’ which allows the definition of conditions which must hold – or parameters which are constrained within intervals. For example: x is between 0,1 y is between 2, 3 or y = x 2 extrapolate the limit of the function, by increasing the upper bound to infinity. This is only a guess and now needs to be proved.</p>

<p>When the static checker issues a warning about a particular implicit proof obligation or contract, it may not necessarily indicate an error in the code. Warnings are issued whenever the checker cannot prove that the contract holds on all executions generated by the abstract interpretation. Thus encouraging you to evaluate and explicitly declare your assumptions</p>

<p>See this <a href="http://en.wikipedia.org/wiki/Abstract_interpretation">wikipedia page</a> and this<a href="http://channel9.msdn.com/blogs/peli/static-checking-with-code-contracts-for-net"> video featuring Francesco Logozzo</a> for more information</p>

<p><strong>Redundant assumptions</strong><br/>
Enabling this option causes the checker to attempt to prove the Contract.Assume() statements and warn if they are provable. This check is only to see if all your Contract.Assume() are still necessary for the static checker, or can be removed or replaced by asserts. The usage of Contract.Assume() is different when used as part of the static checker or as part of the run time checker. During static verification an assumption is something that will just be added to the facts that are known about the program at that program point, and therefore will aid in the proofs generated by the static checker. At run time Contract.Assume() works like Contract.Assert(), the condition is checked, and if fails then an error is generated.</p>

<p><strong>And the rest</strong></p>

<p>Show Squigglies – this option controls the appearance of warnings generated by the static checker in source text. When this option is checked then squigglies appear.</p>

<p>Cahce Results – caches the results of generated proof where the outcome cannot change, thus increasing performance.</p>

<p>Baseline – an interesting option, which allows you to generate a baseline of code where all code at that baseline is deemed ‘proven’ by the static checker and thus will not require a recheck each time you build. This can often be helpful when working with code bases which have not previously used code contracts. This way you can focus your efforts onto warning which are found on new code or changes. To use this option you need to point the baseline XML file. This will be the baseline output directory. After building this baseline file will contain all warnings generated by the static checker. Subsequent runs with the static checker will ignore all warnings which are found in this baseline file.</p>

<p>Next up, we will look further into extending the AnimalParty – defining the rules of engagement with Code Contracts !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Contracts &#8211; Part 1]]></title>
    <link href="http://amy.palamounta.in/2011/01/03/code-contracts-part-1/"/>
    <updated>2011-01-03T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2011/01/03/code-contracts-part-1</id>
    <content type="html"><![CDATA[<h1></h1>

<p>Code Contracts are still reasonably hot off the press from Microsoft Research and its high time we get our heads around using them.</p>

<p>We all have written guard code at the tops of our method bodies. While often necessary, this quickly gets tiresome,repetitive and rather boring.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="n">SomeRandomMethod</span><span class="p">(</span><span class="kt">string</span> <span class="n">arg</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">arg</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="n">ArgumentException</span><span class="p">(</span><span class="s">&quot;Saved by the bell&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Guard code such as this provides a way of preventing code from doing things which we do not expect, which is useful. However this approach has some limitations. We may do something later in the body of the method which would have thrown an unexpected exception, like trying to access the first char of a null string. Also when consuming a method with this kind of guard code, we may not find out we have done something stupid until our code executes and throws an exception.</p>

<p>Imagine a world where each time you called your method and violated a guard pre-condition (like passing null) defined in guard code you got a compilation warning, or error. You are imagining the world of Code Contracts. This new innovation brings a design by contract approach to .NET, allows static contract verification and even (conveniently) document generation.</p>

<p>How can you start living in such a world, I hear you ask. Well your first step is to install Code Contracts from the<strong> <a href="http://msdn.microsoft.com/en-us/devlabs/dd491992.aspx">DevLabs</a> </strong>site as they are not included as part of the visual studio install. The DevLabs install comes in two flavours, the premium and standard edition.</p>

<p>The premium download contains three tools<strong> ccrewrite.exe, cccheck.exe and ccdoc.exe</strong>. Runtime checking of contracts is generated by the ccrewrite tool, while cccheck is a static checker which verifies contracts at compile time. ccdoc is our document generator responsible for adding contract information to existing XML documentation.</p>

<p>Once installed (after a restart of Visual Studio) your project properties pages will have an extra tab “Code Contracts”. Now we can begin enjoying all the new goodies in the <strong><a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.aspx">code contracts namespace</a></strong></p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/code-contracts/properties-pane.png"></p>

<p>That’s all on code contracts for now. Next up, I will show you how to configure code contracts for your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromatin and Histones]]></title>
    <link href="http://amy.palamounta.in/2010/11/30/20081022chromatin-and-histones-html/"/>
    <updated>2010-11-30T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2010/11/30/20081022chromatin-and-histones-html</id>
    <content type="html"><![CDATA[<p>The basic building block of chromatin is the nucleosome, which contains 147 base pairs (bp) of DNA wrapped in a left-handed superhelix 1.7 times around a core histone octamer (two copies each of histones H2A, H2B, H3, and H4). Each core histone contains two separate functional domains: a signature “histone-fold” motif sufficient for both histone-histone and histone-DNA contacts within the nucleosome, and NH2-terminal and COOH-terminal “tail” domains that contain sites for posttranslational modifications (such as acetylation, methylation, phosphorylation, and ubiquitination). Although these histone tails are mostly unresolved in the crystal structure of the nucleosome, they appear to emanate radially from the nucleosome, conveniently positioned to associate with “linker” DNA residing between nucleosomes or with adjacent nucleosomes.</p>

<p>In addition to the core histones, metazoan chromatin also contains linker histones (such as histone H1), which bind to nucleosomes and protect an additional ~20 bp of DNA from nuclease digestion at the core particle boundary. Linker histones are not related in sequence to the core histones, but they also contain a globular domain flanked by NH2-terminal and COOH-terminal tail domains. Although only the linker histone globular domain is essential for binding to nucleosomes, the tail domains are believed to be important for linker histone roles in chromatin folding.</p>

<p><img class="center" src="http://amy.palamounta.in/images/posts/chromatin-histones/Dyad.png"></p>

<h2>Histones</h2>

<p>Histone proteins are among the most highly conserved proteins of higher eukaryotes. Their status as such is reveling as to the importance of Histones both structurally and functionally to the cell. Mutations within the Histones are simply not tolerated, as the fine structure and balance of charge are critical to their functions. In Eukaryotic cells there are 5 main Histone proteins, a linker Histone H1, and the four core Histones H2A, H2B, H3 and H4. These proteins are extensively posttraslationally modified, particularly on their unstructured N termini tails. Histones are by far the most abundant DNA associated protein. Consistent with this role Histones have a high content of positively charged amino acids, where about 20% of all residues are either a Lysine or an Arginine. The core Histones is also relatively small protein ranging in size from 11 kDa to 15 kDa, while H1 is about 21 kDa. A Conserved region is found in each of the core Histones called the Histone fold domain, which is composed of three alpha helices separated by two unstructured loops. It is this domain that mediates the formation of the Histone core particle. Two heterodimers of H3 and H4 come together for form a tetramer core, which makes contacts with DNA. The core particle is then completed by the addition of two H2A H2B dimers. The core Histones each has an unstructured amino terminal tail. These tails are not required for DNA to contact the Histone octamer, but are instead the sites of extensive posttranslational modifications, which alter the function of the individual nucleosome.<br/>
Nucleosomes and the 10 nm fiber. DNA is wound around this octamer approximately twice (~147bp) to achieve a packing ratio of about 6. Though this is a considerable increase in packing it is still not enough. Interphase nuclei have a packing ratio of about 1000- 2000, while metaphase chromosomes have a packing ratio ~ 7000.</p>

<p>DNA forms higher order structures. The primary level of organization can be described as appearing as like beads on a string or the basic unit fiber. A nucleoprotein is a complex of associated DNA with its own mass in basic histone proteins, and almost the same mass in less basic non-histone proteins. Histone proteins are highly conserved in many species. The nucleosome (a nucleoprotein) is about 2 turns of DNA wound around a histone core and plays a central role in the packing of DNA into the nucleus and is the primary determinant of DNA accessibility. When DNA is wrapped around the nucleosome DNA that is associated with the nucleosome is less susceptible to DNase digestion.</p>

<p>When DNA is replicated the new strands are quickly wrapped into nucleosomes after the replication fork passes by special nucleosome assembly proteins. They wrap the DNA around the H3 H4 tetramer; insert the H2a and H2b units to complete the octomer so that the nucleosome exhibits dyad symmetry. Statistically there seems to be a preference for the AT rich minor groves to face the histone octamer, each of the heterodimers contacts about 30 bp of DNA. Arginine side chains face into all the minor groves to maintain rigidity. There are roughly 14 turns of the DNA helix around the nucleosome, because some twisting of the helix is induced by the octamer in the middle of the coil around the nucleosome. H1 histone acts a brace for the octomer, clipping it all together. About 15 to 55bp of linker DNA is between each nucleosome. This can be seen visually under a microscope in low salt concentrations as a ‘bead on a string’ like appearance. This is the primary structure of chromatin or the basic unit fiber.</p>

<p>To investigate the structure of the nucleosome further scientists used the property that the DNA wrapped around the histone octamer was less susceptible to nuclease degradation than the exposed linker DNA between the subunits. This allowed researchers to isolate and resolve the fine structure of the histone octamer. When the nucleosome is digested with a micrococcal nuclease that digests the linker DNA and releases a 166bp chromatosome (the nucleosome minus the linker DNA) and then can be further digested to remove the H1 subunit and to release the nucleosome core particle. When the crystal structure of the histone octamer is examined the octamer is confirmed to be a flat disc. Each of the 4 histone proteins share the conserved helix turn helix turn helix motif (α1, L1, α2, L2, α3) called the central histone fold domain. Heterodimers form so that there is a juxtaposition of the L1 and L2 of each of the proteins creating a tapered appearance. Each histone has both C and N terminus unstructured tails that make up about 28% of the mass of the core. These tails are subject to posttranslational modifications that allow a cell to regulate how condensed the chromatin is, and how able it is to form higher order structures.</p>

<p>The DNA path around the histone core is not a completely uniform path and a considerable amount of variation is seen depending on the superhelixal state of the DNA. The nucleosome causes the DNA to become over wound so that there are 10.2bp per turn. This is because it allows the minor groves and major groves to line up forming channels that the histone tails can pass through, and leaving the major groves accessible to DNA binding proteins to allow the DNA to partake in normal cellular process. But for most interaction with DNA then DNA needs to disassociate from the histone octamer. Dissociation occurs in semi cooperative stages where first the H3 terminals where the DNA enters and leaves the nucleosome dissociate which then induces dissociation in the H2A and H2B heterodimers followed by the H3 H4 heterodimers. I would like to hazard a guess as to how DNA binding proteins could cause the nucleosome to disassociate from the DNA. The increased acetylation disrupts the higher order structure of the chromatin allowing DNA binding proteins to move in to these areas. Because 4 of the 14 minor groves have H3 histone tails passing through them, and H3 tails also contact the DNA as it enters and exits the nucleosome, I guess that when a DNA binding protein binds with a strong association to a promoter region that this induces some kind of conformational change into the H3 tail and thus induces the disassociation event. I have found no literature on this and don’t know weather this has been tested, proved or disproved. If I had a lab and all the skills in the world I would test to see if those regions that bind to DNA binding proteins are statistically associated with the H3 tail passing through the opposite grove on the nucleosome. This would be a preliminary test to see if in fact this could be an explanation. A further thought on this is that the H4 tails makes many contacts with the H2A H2B heterodimers of a neighboring nucleosome core, and this could be away of transferring conformational information from one nucleosome to the next. I am aware that there are nucleosome remolding proteins but have had little time to read up about these things. This was just a thought exercise.</p>

<p>Increased acetylating of the histone tails has been associated with transcription activity and the reverse for repression. One view is that the net charge reduction caused by acetylation causes the conformational change in the nucleosome. Histone tails interact with neighboring nucleosomes and linker DNA and control the amount of condensation of the chromatin. Tails can undergo reversible acetylation on specific amino acids on the tails; this decreases the net charge and thus decreases the interaction with the negatively charged DNA. Increased methylation of tails is associated with prevention of acetylation thus the nucleosomes are more likely to form the 2ndary level of structure.</p>

<p>H1 and the 30 nm Fiber<br/>
Chromatin forms a 30 nm fiber under the microscope. There are two models for the structure of this fiber, the solenoid model and the Zigzag model.<br/>
Under the Solenoid model each coil has about 6 nucleosomes per turn (and therefore contains about ~6*~200bp) to form a 30nm fiber. H1 histone slots in on the inside of the solenoid and is bound to the DNA locking the nucleosome in place. Electron microscopy suggests that the 30 nm fiber is not quite a perfect solenoid it may be a loose helical structure.<br/>
The crystal structure of the tetranulcosome has been resolved to show that the linker DNA may zigzag backwards and forwards between the nucleosomes.<br/>
Histone H1 is less conserved than the other core histones, and has 5 different variants in mammalian genomes, each of whom have different roles gene regulation. H1 facilitates the higher order packing of chromatin, by binding to the linker DNA and maintaining the correct spacing between the nucleosomes. High levels of H1 proteins are associated with the formation of the 30nm fiber and also with a decrease in gene activity. The converse is also true, low levels of the H1 are associated with gene activity. The secondary structure is a dynamic structure and must be able to partially unfold and refold to this solenoid form</p>

<p>Histone Tails are required for the 30nm Fiber<br/>
Core histones that lack the amino terminal tail are incapable to forming 30nm fibers. The most likely role of the tails is to stabilize the 30nm fiber by interacting with adjacent nucleosomes. This model is supported by three dimensional crystal structure of the nucleosome, which shows that each of the N terminal tails of H2A H3 and H4 interacts with the adjacent nucleosome. Recent studies indicate that the interaction between the positively charged N termini of H4 and negative charged region of the histone fold domain of H2A is extremely important for the formation of 30nm fibers.</p>

<p>Chromonema Fibers <br/>
What is the structure of the chromatin fiber in vivo? Do 10-nm, bead-on-a-string chromatin fibers exist, or are they only present in vitro in low-ionic-strength environments? In vitro, the concentration of divalent ions required to induce 30-nm fiber formation is really quite modest (1 to 2 mM). In fact, the estimated Interphase nuclear concentrations of Ca2 and Mg2 ions [4 to 6 mM and 2 to 4 mM, respectively] are not only expected to condense chromatin fibers but also should drive substantial fiber-fiber interactions. For this reason, when considering how chromatin could affect gene expression, one must consider that chromatin primarily exists in a highly ordered state in vivo. Reinforcing this point are elegant light and electron microscopy studies of mitotic and Interphase chromosomes. Fiber sizes ranging from 100 to 300 nm in diameter were observed throughout mitotic chromosomes, and electron micrographs of Interphase chromosomes also displayed a substantial amount of 100-nm-wide fibers. These very large fibers are unstable when nuclei are prepared in the absence of divalent cations or polyamines, mimicking the Mg2 dependence of folding and self-association seen for nucleosomal arrays in vitro.</p>

<p>What is the dynamic structural organization beyond the 30-nm fiber. But how do these structures influence gene function? Is transcription actually occurring on chromonema fibers, or are transcriptionally active regions less condensed? To answer these questions, Tumbar et al. used a mammalian cell line that contained a long, integrated array of LacI-binding sites. When imaged in living cells by decoration with a LacI-green fluorescent protein (GFP) fusion protein, this 90-Mbp tract appears as a single dot. In contrast, the foci decondensed when cells were transfected with an expression vector that produced a fusion of LacI-GFP to the VP16 transcriptional activation domain. The decondensed LacI tract appeared as an extended ribbon estimated to be 80 to 100 nm in diameter that coiled throughout a considerable volume of the nucleus. The 100-nm fiber colocalized with regions of bromodeoxyuridine-uradine 5′-phosphate incorporation, suggesting active transcription within the site, and recruitment of multiple HATs and increased histone acetylation were also observed. Thus, these data suggest that a 100-nm fiber may be the basic unit of higher order structure that is competent for gene expression. Because RNA polymerase II inhibitors did not block formation of the 100-nm fibers, the structural changes observed are not caused by transcriptional activity but more likely precede transcriptional activation at these sites. Fig. 2. Transcriptional activators induce large-scale changes in chromatin folding. (Left) DNA constructs containing LacI-binding sequences (orange boxes) upstream of a dihydrofolate reductase (DHFR) gene (navy blue) were integrated into chromosomes as tandem ~90-Mbp arrays by Tumbar and co-workers. This locus can be visualized in vivo by expressing a LacI-GFP fusion protein (yellow-green protein), which images as a single green focus within the nucleus (top). In contrast, expression of a LacI-GFP-VP16 activator protein (yellow-green-red protein) produced a ribbon like chromonema fiber within a subset of cells (bottom). On the basis of comparison of ribbon length with the known base pair length of the DNA tract, fiber width was estimated at ~100 nm, which is considerably larger and more compact than even a fully condensed 30-nm nucleosomal array.</p>

<p>One concern with these studies is that these tandem LacI arrays are artificial and, thus, their behavior might be aberrant. To look in a more natural context, Mueller et al. examined the behavior of a tandem array of mouse mammary tumor virus (MMTV) promoters driving expression of a ras gene. Array structure and transcription were examined using a glucocorticoid receptor-GFP (GR-GFP) fusion protein to decorate the array in live cells and fluorescence in situ hybridization of fixed nuclei to verify transcription. The behavior of this MMTV array was dynamic. The addition of a GR agonist led to rapid (1 to 3 hours) decondensation of the arrays, with a rate that paralleled accumulation of ras mRNA. Even the decondensed, transcriptionally active arrays retained at least 50-fold more condensation than naked DNA, suggesting maintenance of at least a fully condensed 30-nm chromatin fiber. Therefore, both the LacI-GFP-VP16 activator and GR-GFP can drive local decondensation of a chromatin fiber. Because VP16 and GR are known to recruit either HATs or ATP-dependent chromatin-remodeling complexes, it is tempting to speculate that these activities play key roles in these decondensation events. In fact, the recruitment of transcriptional coactivators, including HATs and human SWI/SNF, was seen during MMTV array induction, and extensive histone acetylation accompanied VP16-dependent decondensation of the arrays examined by Tumbar et al..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun in the lab]]></title>
    <link href="http://amy.palamounta.in/2008/12/07/2008127fun-in-the-lab-html/"/>
    <updated>2008-12-07T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2008/12/07/2008127fun-in-the-lab-html</id>
    <content type="html"><![CDATA[<p>At the moment I have a technicians job, working in a lab. I have two weeks left, and must Finnish the tasks that I have been charged.</p>

<ul>
<li>Create a wild type clone of a region of exonic human sequence.</li>
<li>Induce SNP into three wild type clone via the quick change protocol.</li>
<li>Write a workflow that produced a list of ranked candidate genes, for a human disease using tools such as blast , open reading frame finder tools, and motif searchers.</li>
</ul>


<p>Currently I am having trouble carrying out my ligation reaction into a PGemT easy vector system and then transforming it. Transformation and cells are fine as demonstrated by controls. Ligation is the issue. Diagnostic restriction digests are currently not working, I think this is due to not having enough DNA to digest and then visualise on the gel.</p>

<p>Quick change has been performed on 2 of the three wt clones, and clones have been isolated. The gene now just needs to be sent for sequenceing.</p>

<p>Workflow is on hold.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insulators]]></title>
    <link href="http://amy.palamounta.in/2008/10/23/insulators-part/"/>
    <updated>2008-10-23T00:00:00+13:00</updated>
    <id>http://amy.palamounta.in/2008/10/23/insulators-part</id>
    <content type="html"><![CDATA[<p>Today I thought I could kill two birds with one stone, and study up about insulator elements, which i don’t really understand at all to be honest. So bear with me my avid readers (cough).</p>

<p>Right, what do I always do first in a situation like this is hit <a href="http://www.ncbi.nlm.nih.gov/  ">http://www.ncbi.nlm.nih.gov/  </a>
best place to start. So a quick book search and i see that apparently ‘insulators define functional domains’ and ‘maintain the independence of functional domains’. So i ask, “What does this mean?” and so our/mostly mine (as Im the only reader of this shit) journey begins.</p>

<p>Ok so in 1991 a group lead by Kellum and Schedl were playing around with the positional effect. Breifly the positional effect refers to a general problem in GE that when you introduce a cloned gene into a genome and intergrate it, often (depending on the mechanism used) the insertion is random. Gene expression is very dependent on the spatial positioning of the gene at any given time, such that if a gene is inserted into a heterochromatic region it will be silenced and therefore not expressed, while if it is inserted into a region of open chromatin configuration it will be expressed. Kellum et al were able to show that when the W (dominant giving red eyes) was inserted randomly into the genomes of w- drosophila variable red eye expression was observed (owing to the positional effect). When the W gene was flanked by 1-2kb insulator elements the variable expression was lost and all progeny were red eyed. Kellums group interpreted this to mean that somehow the insulator elements were able to bring about changes in the chromatin where the transgene had inserted and bring about stable expression, or in more technical terms, establish a ‘functional domain’.</p>

<p>Consider a situation where by we have two genes that are next door to each other. Let me introduce a bug with two genes: gene ‘go_left’ and gene ‘go_right’. Upstream of each of these genes are there respective control elements, which will turn on the expression of these genes. The signal to go left is received, and transcription begins from go_left, the bug goes left. But potentially the go_right gene could be transcribed from the go_lefts control element, and if this happens then the bug will end up in an infinate loop of go left, go right and never get where it wants to go. So god being good and great and awesome bla bla.. saw this mathematical conundrum and solved it with a stroke of genious – said ‘LET THERE BE INSULATION’ (p.s creationist’s dont belong in this blog)</p>

<p>Ok so back to the point im trying to make to myself: INSULATORS DEFINE FUNCTIONAL DOMAINS.</p>

<p>So NCBI disapointed on this topic. The article I read then went on to say that insulators do not them selfs provide insulation, but insulate by way of the proteins that they recruit. Also that it has been shown that such insulator binding proteins also bind to the nuclear matrix. From what I can gather about the nuclear matrix, I get the feeling that it is an extreamly important controler of gene regulation. One day shitwolf.. one day..<br/>
Anyway so if these proteins that are binding to insulator elements, also bind to the nuclear matrix, you can imagin that insulators may be able to physically define structural and spatial domains in the chromatin. But then the article falls flat on its face, and runs away scared. I am sent else where on my journy…</p>
]]></content>
  </entry>
  
</feed>
