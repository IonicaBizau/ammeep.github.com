<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Amy Palamountain]]></title>
  <link href="http://ammeep.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://ammeep.github.io/"/>
  <updated>2013-07-29T21:47:56+12:00</updated>
  <id>http://ammeep.github.io/</id>
  <author>
    <name><![CDATA[Amy Palamountain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unsuck your backbone]]></title>
    <link href="http://ammeep.github.io/2013/04/12/unsuck-your-backbone/"/>
    <updated>2013-04-12T00:00:00+12:00</updated>
    <id>http://ammeep.github.io/2013/04/12/unsuck-your-backbone</id>
    <content type="html"><![CDATA[<h1></h1>

<p>I gave a talk at <a href="http://codemania.co.nz/" title="Codemania">Codemania</a> - Unsuck your backbone. It was a lot of fun, I hope you all enjoyed it as much as I did.</p>

<p><strong>Slides</strong><br/>
<script async="true" class="speakerdeck-embed" data-id="cf29dcf084890130af0d12313d053a9e" src="//speakerdeck.com/assets/embed.js"> </script></p>

<p><strong>Video</strong>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/0o2whtCJw8I "></iframe></div></p>

<p>The purpose of the talk is to introduce some simple architectural patterns that you can use in your large JavaScript applications to help you achieve a scalable code base.</p>

<p>The general gist is:</p>

<ul>
<li>Backbone is awesome, but its scaling it is hard.</li>
<li>MVC is a presentation pattern, and if we are to scale our JS apps we need to look beyond it</li>
<li>People have been using composite application architecture successfully when building desktop applications for a long time now, so can we do the same with JavaScript apps?</li>
<li>We go through some of the concepts behind modules and application objects and patterns, pub/sub and how the interaction between them might work,</li>
<li>Then introduce marionette.js as a set of extensions to backbone which allow you to achieve a composite application architecture .
*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Master Kids]]></title>
    <link href="http://ammeep.github.io/2013/02/22/games-masters-workshops-kids-can-code/"/>
    <updated>2013-02-22T00:00:00+13:00</updated>
    <id>http://ammeep.github.io/2013/02/22/games-masters-workshops-kids-can-code</id>
    <content type="html"><![CDATA[<h1></h1>

<p>If you came to the Digital Media Careers Day at Te Papa, and attended my workshop, you may be here looking for the game we built together.</p>

<p>You can find it here</p>

<p><a href="http://ammeep.github.com/CollieInSpace/" title="http://ammeep.github.com/CollieInSpace/">http://ammeep.github.com/CollieInSpace/</a></p>

<p>This is a link to the source code. From here you are able to play the game, download the code, and even try and add some more features to the game. Any questions, or just want to know more about what you can do to learn more about programming, just send me a message bellow!</p>

<p><script async="true" class="speakerdeck-embed" data-id="c92f46d05efb01307e0412313b031ac2" src="//speakerdeck.com/assets/embed.js"> </script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat &#8211; Wellington]]></title>
    <link href="http://ammeep.github.io/2012/12/09/global-day-of-code-retreat-wellington/"/>
    <updated>2012-12-09T00:00:00+13:00</updated>
    <id>http://ammeep.github.io/2012/12/09/global-day-of-code-retreat-wellington</id>
    <content type="html"><![CDATA[<h1></h1>

<p><img class="center" src="/images/posts/gdcr/gdcr_ad.png"></p>

<p>Yesterday a group of dedicated developers in Wellington and Auckland woke early on a saturday morning to help kick of the Global Day of Code Retreat in style. We came from all walks of development life, from Haskell to C#, from JavaScript to Perl, we all came together with a common goal – to practice our craft. In 6 45 minute sessions we coded <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway’s Game of Life</a> each time with a new constraint, <strong>deleting</strong> all traces of the code afterwards.</p>

<p>The most interesting thing about the day was that initially there was reluctance to delete code. It was amazing to see that by the end of the day everyone was more than happy to delete their code, seeing the value on iterating on ideas to reach an awesome solution.</p>

<p>It was incredible to see the range of solutions people came up with to work around constraints. One pair used try – catch blocks to avoid ‘if’ statements, and another pair built an eventing system to avoid the need for return values. The diversity of solutions was great to see!</p>

<p>Some massive thank you’s are in order! First, to the brains behind the idea of a Code Retreat, <a href="http://coreyhaines.com/">Corey Haines</a> <a href="https://twitter.com/jthurne">Jim Hurne</a> <a href="https://twitter.com/volunteerjunkie">Alissa Conaty</a>  and <a href="https://twitter.com/adibolb">Adi Bolboaca</a> have put in a massive amount of work to ensuring that the Global Day of Code Retreat was a success by supporting all the facilitators around the world. Secondly to our <a href="http://globalday.coderetreat.org/sponsors.html">GlobalSponsors</a> particulaly <a href="http://www.jetbrains.com/">JetBrains</a>. Locally – the day would not have been possible if not for the support of <a href="http://www.xero.com/">Xero</a> ( who gave us our beautiful venue) and <a href="http://www.mindscapehq.com/">Mindscape</a> ( who kept us feed on the day) Both these companies do such an amazing job at supporting the local developer community and we appreciate it so much!</p>

<p>Thanks to every one who came and made the day what it was.  This is  what made the day so successful. <a href="https://twitter.com/martin308">Martin</a> and I had such a great time facilitating the event!.Can’t wait for the next one!</p>

<p><div class="flexslider">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
      <img src="">
    </ul>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Service Location]]></title>
    <link href="http://ammeep.github.io/2012/10/26/on-service-location/"/>
    <updated>2012-10-26T00:00:00+13:00</updated>
    <id>http://ammeep.github.io/2012/10/26/on-service-location</id>
    <content type="html"><![CDATA[<p>I have some pretty strong feelings about the use of the Service Locator pattern in the software we build. They go along the lines of ‘why would you ever use it?’ and possibly (and somewhat mellow dramatically) rocking slowly backwards and forth in the corner of the shower after being exposed to it. So to ease my pain, and perhaps yours, I have compiled an explanation of why I feel so intolerant toward this pattern.</p>

<p><img class="center" src="/images/posts/onservicelocation/servicelocator.jpg"></p>

<h2>Coupled To The Service Locator</h2>

<p>I’ll wager that you have heard about loose coupling in software. It’s something that developers from all walks of life can agree on – we should strive to build loosely coupled software. We do this for many reasons, to achieve composability, for ease of maintenance, testability and more generally, the sanity of the other developers on your team.</p>

<p>A technique used to achieve loosely coupled components is dependency injection. Dependency injection can come in many forms. From dependencies being provided at object construction time, all the way to being resolved, via a service locator, during the execution of a some operation on that object.</p>

<p><img class="center" src="/images/posts/onservicelocation/graph.jpg"></p>

<p>By injecting dependencies when an object is constructed, you have the most chance of successfully building loosely coupled applications.</p>

<p>Somewhere in the middle, is property injection. Depending on how your property injection is implemented your chances of building loosely coupled components vary.</p>

<p>And at the very extreme – The Service Locator. When you implement a call to a static service locator during the execution of a methods, the net result is a hard coupling to the service locator.</p>

<p><img class="center" src="/images/posts/onservicelocation/looslycoupledthing.jpg"></p>

<p>Am i loosely coupled? One could argue that our class is loosely coupled because is not reliant on a given implementation of the ILooselyCoupledDicisionEngine, and yes strictly speaking, this is true. But in regard to the how coupled this object is to other objects, this is a moot point.</p>

<p>The base level of coupling has already been set, we are already coupled to our static service locator. LooselyCoupledThing is <strong>directly</strong> coupled to the ServiceLocator object.</p>

<p>LooselyCoupledThing is unable to be an object in its own right, without relying on its dirty friend the service locator to help it along in life.</p>

<p>By using the ServiceLocator object you have introduced coupling where your goal was to reduce it.</p>

<h2>Unit Tests Scream Warning Signs</h2>

<p>One of the first things I notice when working with an application which has heavy use of a service locator, is the extra unit testing baggage which comes with it. Usually there is a marked lack of discoverability of dependencies, and over time unit tests projects seem to grow in complexity until they are more complex than what they are testing.</p>

<p>Unit tests are a measuring stick for complexity in the code they are testing. The amount of setup work involved with getting a test to pass can be a strong indication for things like poor encapsulation and separation of concerns. When your unit test requires a full set up of your service locator object, alarm bells should be sounding, perhaps your components are not following the principals of SOLID as closely as they could. Let me explain.</p>

<p>As an example, lets define a class to represent a car. I’ll admit, I don’t know lot about cars so this could get interesting.</p>

<p><img class="center" src="/images/posts/onservicelocation/car1.jpg"></p>

<p>It doesn’t do a lot and its super easy to write a unit test for.</p>

<p><img class="center" src="/images/posts/onservicelocation/car2.jpg"></p>

<p><img class="center" src="/images/posts/onservicelocation/car4.jpg"></p>

<p>All is well in the world, the test passes, and the car is able to drive around.</p>

<p>Until someone who is very knowledgeable about cars spots my nieve implementation, and decides that a car needs an engine to start. The engine is resolved using our (dirty) friend, the service locator.</p>

<p><img class="center" src="/images/posts/onservicelocation/car5.jpg"></p>

<p>And now, the test fails. Our static service locator is unable to resolve our IEngine implementation.</p>

<p><img class="center" src="/images/posts/onservicelocation/car6.jpg"></p>

<p>But wait, our car is able to driven when our application runs outside of the context of the test, so what is different here? In the context of the test, we have not registered any of our dependencies with our service locator. Lets set them up now to get our test to pass.</p>

<p><img class="center" src="/images/posts/onservicelocation/car7.jpg">
<img class="center" src="/images/posts/onservicelocation/car8.jpg"></p>

<p><strong>For every new dependency</strong> which is resolved in line via a service locator like this, we need to ensure that our test suit has a corresponding dependency set up in its registry.</p>

<p>Hopefully you can see the problem here.<strong> </strong>This is a very trivial example, in the real world you can have many hundreds of services wired up in your unit test project like this. I commonly see *monolithic* test base classes, which before the start of *every* test fixture (or worse, an individual test) will set up every possible dependency that could be requested from the service locator object.</p>

<p>This is massive overhead, for both the running time of your tests and for ease of understanding of what is actually being tested.</p>

<p>These kinds of unit test are telling you two things</p>

<ul>
<li> That you are tightly coupled to your service locator.</li>
<li> That you are violating the principal of single responsibility.</li>
</ul>


<p>The car object has a single responsibility – to drive. It should not be involved with the resolution of its engine. Imagine if every time you had to drive into work you first had to find the correct engine for your car, and assemble the car with said engine before you could start it. This makes no sense conceptually, yet this is exactly the kind of design our service locator has given us.</p>

<p>So following that logic – when we call our cars constructor, we should have everything we need up, set up and ready to go, so that our object is ready to carry out its behaviours.</p>

<p><img class="center" src="/images/posts/onservicelocation/car9.jpg"></p>

<p>Ok – its a little better. But not much. We are still coupled to our service locator object and our test still require our service locator object to be bootstrapped and ready to go.</p>

<p><img class="center" src="/images/posts/onservicelocation/car10.jpg"></p>

<p>Lets turn our ServiceLocator object into an injectable dependency. I can almost hear proponents of the service locator pattern nodding in agreement. But the question is, is this any better? Its defiantly better than using a static service locator. We can easily discover when we construct a car object that it takes an IServiceLocator dependency.</p>

<p><img class="center" src="/images/posts/onservicelocation/car12.jpg"></p>

<p>But, this is starting to feel like we need to write a lot of ‘plumbing code’ in our unit test. The purpose of this test is to assert that we are able to drive our car, so why does it feel like all we are really showing is that we are able to set up a service locator?</p>

<p><strong>Over</strong> <strong>half</strong> the lines of code in this test class are about our service locator! Over half the lines of code in this test class are concerned with <strong>plumbing.</strong></p>

<p>Just mock the service locator!<strong>  O_O </strong></p>

<p><img class="center" src="/images/posts/onservicelocation/car13.jpg"></p>

<p>Our test class looks a little cleaner. But, is this enough? What happens when we decide that in order to drive, not only do we need an engine, but we also need some wheels?</p>

<p><img class="center" src="/images/posts/onservicelocation/car14.jpg"></p>

<p>Remember our test?</p>

<p><img class="center" src="/images/posts/onservicelocation/car15.jpg">
<img class="center" src="/images/posts/onservicelocation/car16.jpg"></p>

<p>Our service locator mock knows nothing about our flash new wheels, and the test fails. The point here is at compile time we could not <strong>discover</strong> the new dependency on wheels. Our test are indicating that injecting a service locator object is a brittle approach, because we can never be clear about the <strong>intent</strong> of the car object.</p>

<p>A much simpler approach, is to be explicit and inject our dependencies up front.</p>

<p><img class="center" src="/images/posts/onservicelocation/car17.jpg"></p>

<p>Now we know, if we want to construct a car, we will need an engine and a collection of wheels. And when someone decides we need a radio in order to drive our car, a compile error will warn us a new dependency has been added to our car.</p>

<p><img class="center" src="/images/posts/onservicelocation/car18.jpg"></p>

<p>And look at our test! Much simpler, much more explicit, and it only tests one thing!</p>

<h2>Lifetime Management Hell</h2>

<p>A commonly overlooked side effect of introducing Inversion of Control to your software, are changes life time management of objects.  A lack of understanding of this side effect, combined with excessive or blind use of a service locator object, can have unexpected and even catastrophic side effects.</p>

<p>To understand what I mean by this lets look at a very simple example – a sloth repository.</p>

<p><img class="center" src="/images/posts/onservicelocation/sloth.jpg"></p>

<p>In this example, when we want to query our datastore for all the sloths, we have direct control over when our unit of work gets disposed. Or in other words, we can manage the lifetime of the unit of work object.</p>

<p>If we choose to inject the unit of work via our inversion of control mechanism, we loose the ability to choose when the unit of work gets disposed. We can no longer wrap it up in a nice using statement. The unit of work needs to disposed of by the object which is responsible for constructing our repository.</p>

<p><img class="center" src="/images/posts/onservicelocation/sloth2.jpg"></p>

<p>If you are using an IOC container then it will be its responsibility to coordinate the call to Dispose. But – how can the container possibly know when unit of work is ready to be disposed of?</p>

<p>Luckily, the cleaver guys and gals who have created your IOC containers understand that out of inversion of control naturally arises the need to manage object scope and lifetime. Modern IOC containers provide out of the box support for managing the lifetime of an object, in the scope of a thread, an http request or even in singleton scope. Modern inversion of control containers are smart enough to cover almost any lifetime scope we can dream up.</p>

<p>Nicholas Blumhardt covers this in more detail in <a href="http://nblumhardt.com/2011/01/an-autofac-lifetime-primer/">this excellent blog post</a> if these concepts are new to you, I strongly recommend reading his description.</p>

<p>So what about the service locator’s pattern? When calling into your service locator’s in line in your class, what lifetime scope should be used to request the object? The parent object has already been constructed and the information the container needs to give you a correctly scoped dependency is gone. The service locator is highly likely to give you an object which does not match the scope of its parent.</p>

<p>How can getting the incorrectly scoped object have catastrophic effects?</p>

<p><img class="center" src="/images/posts/onservicelocation/sloth3.jpg"></p>

<p>In a web app, a unit of work is something that makes sense to be scoped per HTTP request. If our service locator resolves an incorrectly scoped unit of work (i.e. one outside the current HTTP request) all kinds of funny things can start happening. In the above example one HTTP request thread is inserting a sloth. When save is called, we find that a different HTTP request thread has already disposed of our unit of work.</p>

<p>The example is one that you would probably catch pretty early on, as it throws an exception, but you can imagine that not all cases will not throw exceptions but silently work without any obvious indication of incorrect functionality.</p>

<p>Imagine a simple attribute (created in singleton scope) which is used to validate user permissions.</p>

<p> <img class="center" src="/images/posts/onservicelocation/perm.jpg"></p>

<p>It uses a service locator to resolve the current user object. It then uses this object to validate that the current user had permission to do something. Everything works great. Until you check the debug logging under load. The current thread user, and the object the attribute was using to validate permissions were actually different! The service locator knows nothing about what scope it should resolve the current user from. Some users get denied when they had permission, and some users are let through when in reality they shouldn’t have. Eeek!</p>

<p>It is super important that when using techniques such as inversion of control that we understand the implications to life time management. If we don’t understand this concept, and we blindly use the service locator pattern, there will be trouble in your future.</p>

<h1>When is it ok?</h1>

<p>Never.</p>

<p>Ok, thats a bit of stretch. Sometimes you cant avoid it.</p>

<p>There are generally two broad cases where you might need to break out and call the service locator.</p>

<ul>
<li> When your class interactions have been designed in a way which are not easily injectable. In this case the advice is <strong>refactor</strong> your code to support it.</li>
<li> When you are using a framework component which does not support constructor injection – which I often find cases for in ASP.NET</li>
</ul>


<p>There is a third, more specialised case, where I can see an argument to use a service locator object. When building libraries which have swappable components. This case would be a good use (the only one I can think of) of the common service locator project <a href="http://commonservicelocator.codeplex.com">http://commonservicelocator.codeplex.com</a> What this would enable developers consuming your library or framework is to plug in their dependencies without needing to know the implementation details of your own IOC container. <strong>However</strong>, this should be the extent of its use. The library or frameworks internal code should still follow the principals of SOLID. There is still no need to have service locator calls sprinkled through out its code base.</p>

<p>During the description of testing a Car class I eluded to the fact that when using service location inline the car is responsible both for its own behaviour and its construction. This is the fundamental difference between dependency injection, and service location. In dependency injection, all objects are created externally, dependent objects are<strong> given </strong>to objects which need them. In service location, dependencies are <strong>requested. </strong>As much as I hate to admit, I can see that in some application architectures, the<strong> requesting</strong> of dependencies might be more appropriate. Though I can not see how this would ever need to be the sole way of injecting dependencies, throughout an application.</p>

<h1>Final thoughts</h1>

<p>The heavy use of service location in your code is generally a sign of few things. A tight coupling between objects, and objects resolution, objects which have more than one single responsibility, and a mine field of lifetime management hell.</p>

<p>If you find yourself in a position where your test projects require a similar level of maintenance and are of comparable complexity to you application code, have a good look into if you have baked in service locator object as a core concept in your application.</p>

<p>When we write software, we should be concerned the the business functions we are trying to solve – our core concepts are our business objects, not a service locator.</p>

<p>[![Kick It][27]][27]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflecting on Codemania]]></title>
    <link href="http://ammeep.github.io/2012/04/02/reflecting-on-codemania/"/>
    <updated>2012-04-02T00:00:00+12:00</updated>
    <id>http://ammeep.github.io/2012/04/02/reflecting-on-codemania</id>
    <content type="html"><![CDATA[<h1></h1>

<p>3 days post <a href="http://codemania.co.nz/">Codemania</a> – it was a blast. Down here in New Zealand we don’t often get the opportunity to listen to world class content, at a world class conference. We have <a href="https://twitter.com/#!/kiwipom">Ian Randall</a> and <a href="https://twitter.com/#!/nzben">Ben Gracewood</a> to thank for this. From the venue to the top notch speakers like <a href="https://twitter.com/#!/DamianEdwards">Damian Edwards</a>, <a href="https://twitter.com/#!/rioter">Jared Wyles</a>, <a href="https://twitter.com/#!/jarichaust">Jacinta Richardson</a>, <a href="https://twitter.com/#!/avon">Karl van Randow</a>, <a href="https://twitter.com/#!/reasther">Richard Easther</a> and <a href="https://twitter.com/#!/AaronMorton">Aaron Morton</a> . From start to finish and everything in between, <a href="https://twitter.com/#!/nzben">Ben</a> an <a href="https://twitter.com/#!/kiwipom">Ian</a> did a fantastic job!</p>

<p><img class="center" src="/images/posts/reflecting-on-codemania/swag.jpg"></p>

<p>Phil Haack have the keynote ‘I fucking love to code’ where he talked about why we should do everything we can to keep our love for code alive. Anything that kills your passion, kills your mental flow, or the ability to code in anyway should be improved or removed. For example buy a decent chair. We spend more time sitting than we do sleeping as coders, so you better make damn sure your body is comfortable doing it. </p>

<p>Of particular relevance for me was the few moments he spent addressing the recently resurged topic of ‘subtle sexism in the work place’. For women, all to often this can a major blocker of our love to code, and as coders we should all be doing our best to remove this from the work place. I have a few thoughts on this I would like to share .I’ll keep it brief and save the rant for another post.</p>

<p>Subtle sexism is a problem in any workplace, and no industry can afford to become complacent. In particular, in programming circles due to a skewed ratio of men to women, work places can easily become ‘boys clubs’. Women programmers in a lot of cases have spent their lives playing with ‘boys toys’ enjoying things that ‘boys do’, only to join the work force to once again be reminded that this is a ‘boys profession’ or a ‘boys club’. This is the very antithesis of what we should be practising. Being welcoming and inclusive should be something we practice not only in the work place, but in every aspect of our lives. If you want to do your bit for removing subtle sexism in ANY work place there are some really simple things you can do. If you can, start young – teach your kids (and your kids playmates if you can) that girls can like blue and boys can like pink. Nursing, teaching, firefighting and engineering, these are professions which both boys and girls should feel comfortable in persuing without having to deal with ingrained gender divisions. If you can’t start young then call out your peers for behavior that makes you or others uncomfortable. 9 times out of 10 people are simply not aware that their sexist comment, tone of voice or rude behaviour makes them look like a worse person than they actually are.</p>

<p><a href="https://twitter.com/#!/nzkoz">Michael Koziarski</a>, a member of the core rails team took us on a trip through Community Development – giving plenty of humorous insights into how not to report an issue to projects. To me this spoke to the theme of ‘respect other programmers’. Joining in an endless rant on the GitHub issue list without concrete examples of your problem, is not helping anyone fix the issue any faster, in fact it makes it more likely that the issue wont get fixed. Who wants to help out an angry thankless mob with a sense of self entitlement? He also had another classic piece of advice: The shed is green – get over it.</p>

<p>Of personal highlight for me was <a href="https://twitter.com/#!/samsaffron">Sam Saffron</a> session ‘Performance on the web’ . He covered a lot of ground very quickly and never lost the audience once. This guy is a speed machine. Check out his blog of all his links from the talk <a href="http://samsaffron.com/archive/2012/03/23/sam-s-ultimate-web-performance-tools-and-resources">check them out</a>. There is so much amazingness in there.</p>

<p><a href="https://twitter.com/#!/ppog_penguin">Ivan Towlson</a> took us on a journey though the for loop and more specifically <em>How to Not Write a For Loop</em>. He really hit home his point that describing your loop in a more functional way can dramatically increase readability and in some cases safety of your loops. Luckily in .NET we are lucky to have things like LINQ and Lamdba expression trees, which allow us to code our loops in a much more functional way. Ivan left me inspired to re-visit functional languages.</p>

<p>The day closed with a non technical talk given by <a href="https://twitter.com/#!/maupuia">Mike Brown</a>. I found him to be incredibly engaging, he would fit right in on stage at TED. He spoke about how if we had to live our life over and over again, every pain, every sigh, every happiness, over and over again for eternity how would you feel? He asked us to reflect on how well we had lived, and how well we want to live. He called us to consider the power we have as programmers, power to change the way people work and live, and how important it is to treat this with respect. All very stirring stuff, and a perfect way to round off the day.</p>

<p>I personally walked away from the day completely inspired to live my life well, always do what I love. To keep respecting and embracing my peers and the ideas they have to contribute. Write lots of code, keep learning new things and most importantly have a blast doing it.</p>

<p>If you didn’t go to Codemania this year, I highly recommend you do next year!</p>
]]></content>
  </entry>
  
</feed>
